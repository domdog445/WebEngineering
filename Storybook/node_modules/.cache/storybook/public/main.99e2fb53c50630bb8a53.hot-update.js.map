{"version":3,"file":"main.99e2fb53c50630bb8a53.hot-update.js","sources":["webpack:///./stories/Ubung7/Page7.stories.js","webpack:///./stories/Ubung7/Page7ExpressServer.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { createPage6createFiles } from './Page7CreateFiles'\\nimport {createPage6MergeFiles} from './Page7Merge'\\nimport {createPage6Express} from './Page7ExpressServer'\\n\\nexport default {\\n  title: 'Lösungen der Übungen/Übung 07',\\n  argTypes: {},\\n};\\n\\nconst TemplatecreateFiles = (args) => createPage6createFiles(args);\\nexport const FileGeneratoren = TemplatecreateFiles.bind({});\\n\\nconst TemplateMerge = (args) => createPage6MergeFiles(args);\\nexport const FileMergen = TemplateMerge.bind({});\\n\\nconst TemplateExpress= (args) => createPage6Express(args);\\nexport const ExpressServer = TemplateExpress.bind({});\\n\\n\\n\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"FileGeneratoren\":{\"startLoc\":{\"col\":28,\"line\":10},\"endLoc\":{\"col\":66,\"line\":10},\"startBody\":{\"col\":28,\"line\":10},\"endBody\":{\"col\":66,\"line\":10}},\"FileMergen\":{\"startLoc\":{\"col\":22,\"line\":13},\"endLoc\":{\"col\":59,\"line\":13},\"startBody\":{\"col\":22,\"line\":13},\"endBody\":{\"col\":59,\"line\":13}},\"ExpressServer\":{\"startLoc\":{\"col\":23,\"line\":16},\"endLoc\":{\"col\":57,\"line\":16},\"startBody\":{\"col\":23,\"line\":16},\"endBody\":{\"col\":57,\"line\":16}}};\n    \nimport { createPage6createFiles } from './Page7CreateFiles'\nimport {createPage6MergeFiles} from './Page7Merge'\nimport {createPage6Express} from './Page7ExpressServer'\n\nexport default {\n  title: 'Lösungen der Übungen/Übung 07',\n  argTypes: {},\n};\n\nconst TemplatecreateFiles = (args) => createPage6createFiles(args);\nexport const FileGeneratoren = TemplatecreateFiles.bind({});;\n\nconst TemplateMerge = (args) => createPage6MergeFiles(args);\nexport const FileMergen = TemplateMerge.bind({});;\n\nconst TemplateExpress= (args) => createPage6Express(args);\nexport const ExpressServer = TemplateExpress.bind({});\n\n\n\n\n\n\nFileGeneratoren.parameters = { storySource: { source: \"(args) => createPage6createFiles(args)\" }, ...FileGeneratoren.parameters };\nFileMergen.parameters = { storySource: { source: \"(args) => createPage6MergeFiles(args)\" }, ...FileMergen.parameters };\nExpressServer.parameters = { storySource: { source: \"(args) => createPage6Express(args)\" }, ...ExpressServer.parameters };","export const createPage6Express = ({\n\n}) => {\n  const article = document.createElement('article');\n\n  const section = `\n  <script src=\"/Style/prism.js\"></script>\n  <link rel=\"stylesheet\" href=\"/Style/prism.css\">\n  <p>In dieser Aufgabe sollten zwei Node Kommandozeilen-Tools entwickelt werden. Die erste Anwendung soll eine Datei erstellen welche mit Zahlen gefühlt ist. Die andere Erstellt eine Datei welche mit Buchstaben gefühlt ist. Die Anzahl der Zeilen können als Parameter übergeben werden </p>\n  \n\n  <details>\n  <summary> Source Code des Buchstaben Genereator (alpha_file_gen.mjs)</summary>\n\n\n  <pre>\n\t\t<code class=\"language-javascript\">\n\t\t//Imports\nconst fs = require('fs');\nconst http = require('http');\nconst https = require('https');\n\nconst merge_streams = require(\"./Moduls/merge_streams.js\");\nconst merge_files = require(\"./Moduls/merge_files.js\");\nconst alpha_file_gen = require(\"./Moduls/alpha_file_gen.js\");\nconst number_file_gen = require(\"./Moduls/number_file_gen.js\");\n\n\nconst outputfolder = \"Public/Output/\";\nconst inputfolder = \"Public/Input/\";\n\n//Express Const\nconst express = require('express');\nconst app = express();\n\nconst httpServer = http.createServer(app);\n\n//Activate directly folder\napp.use('/static', express.static(__dirname + '/public'));\n\n//Body Parser\napp.use(express.urlencoded({\n  extended: true\n}))\n\n\n\n// For http\nhttpServer.listen(8080);\n\n//Startseite\napp.get('/', function (req, res) {\n    res.header('Content-type', 'text/html');\n    return res.end(\t\\`<h1> Willkommen beim Gen/Merge Tool </h1>\n\t\t <a href=\"/genFiles\">Hier geht es zum generieren von Dateien</a>'\n\t\t <a href=\"/MergeFiles\">Hier geht es zum konkatenieren der Dateien</a>'\\`\n\t\t\n\t);\n\t\n});\n\n//GenFiles\napp.get('/genFiles', function (req, res) {\n    res.header('Content-type', 'text/html');\n    return res.end(\\`<form method=\"POST\" action=\"/createFile\">\n\t\t  \t<h1>Generate Files</h1>\n\t\t    <a href=\"/\"> back </a> <br>\n\t\t  \n\t\t  \n\t\t  <label for=\"amountID\"> Amount: </label> </div>\n\t\t  <input id=\"amountID\" type=\"text\" name=\"amount\" />\n\t\t  \n\t\t   \n\t\t  \n\t\t  </style>\n\t\t  <outerBox>\n\t\t  <fieldset>\n\t\t  <legend>GenerateType</legend> <div>\n\t\t\t<input type=\"radio\" id=\"numbCreate\" name=\"GenerationType\" value=\"numb\">\n\t\t\t<label for=\"numbCreate\"> Numbers</label> </div><div>\n\t\t\t<input type=\"radio\" id=\"alphCreate\" name=\"GenerationType\" value=\"alph\">\n\t\t\t<label for=\"alphCreate\"> Alphabatic</label> </div>\n\t\t  </fieldset>\n\t\t  </outerBox>\n\t\t  \n\t\t  <input type=\"submit\" />\n\t\t</form>\n\t\t<style>\n\t\t\tfieldset {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\t\touterBox {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: row;\n\t\t\t}\n\t\t\\`\n\t);\n\t\n});\n\n//MergeFiles\napp.get('/MergeFiles', function (req, res) {\n    res.header('Content-type', 'text/html');\n\t\n\tvar result = \\`<form method=\"POST\" action=\"/MergeFiles\">\n\t\t  <h1>Merge follow Files</h1>\n\t\t  <a href=\"/\"> back </a><br>\n\t\t  <style>\n\t\t\tfieldset {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t}\n\t\t\touterBox {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: row;\n\t\t\t}\n\t\t  \n\t\t  </style>\n\t\t  <outerBox>\n\t\t  <fieldset>\n\t\t  <legend>File1</legend>\\`\n\t\n\t\n\t\n\n\tfs.readdir(inputfolder, (err, files) => {\n\t\tfiles.forEach(file => {\n\t\t\tresult +=\\`<div><input type=\"radio\" id=\"file1`+ '$' + `{file}\" name=\"file1\" value=\"`+ '$' + `{file}\">\n\t\t\t<label for=\"file1`+ '$' + `{file}\"> `+ '$' + `{file}</label> </div>\\`\n\t\t\t\n\t\t});\n\t\tresult+= \"</fieldset><fieldset><legend>File2</legend>\"\n\t\t\n\t\tfs.readdir(inputfolder, (err, files) => {\n\t\t\tfiles.forEach(file => {\n\t\t\t\tresult +=\\`<div><input type=\"radio\" id=\"file2`+ '$' + `{file}\" name=\"file2\" value=\"`+ '$' + `{file}\">\n\t\t\t\t<label for=\"file2`+ '$' + `{file}\"> `+ '$' + `{file}</label></div> \\`\n\t\t\t\t\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tresult +=  \\`</fieldset> </outerBox>\n\t\t\t  <input type=\"submit\" />\n\t\t\t  </form>\\`;\n\t\t\treturn res.end(result);\n\t\t\t\n\t\t})\n\t\n\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t})\n\t\n});\n\n\n//Post CreateFile\napp.post('/createFile', (req, res) => {\n\tconst amount = req.body.amount;\n\tconst genType = req.body.GenerationType;\n\tvar outputPath = inputfolder+genType+amount+\".txt\";\n\t\n\tconsole.log(amount);\n\tconsole.log(genType);\n\t  \n\tif(isNaN(amount))\n\t{\n\t\tres.end(amount + \" ist keine gültige Zahl\");\n\t\treturn;\t\n\t}\n\t\n\tif(genType === \"numb\")\n\t\tgenFile(amount,outputPath,res,number_file_gen.gen);\n\telse if(genType === \"alph\")\n\t\tgenFile(amount,outputPath,res,alpha_file_gen.gen);\n\telse\n\t\tres.end(genType + \" ist nicht 'alph' oder 'numb'\");\n})\n\n\napp.post('/MergeFiles', (req, res) => {\n\tconst file1 = req.body.file1;\n\tconst file2 = req.body.file2;\n\t\n\tconsole.log(file1);\n\tconsole.log(file2);\n\t\n\tconst file1Path = inputfolder + file1;\n\tconst file2Path = inputfolder + file2;\n\t\n\tvar outputPath = outputfolder+\"Merged-\"+file1+\"-\"+file2+\".txt\"\n\t\n\tMergeFSS(file1Path,file2Path,outputPath,res);\n\t\n\t\n})\n\n//Get CreateNumb\napp.get('/createNumbFile/:amount', function(req, res) {\n    console.log(req.params);\n\t\n\t\n    var amount = req.params.amount;\n\tvar outputPath = inputfolder+\"Numb\"+amount+\".txt\";\n\t\n\tif(isNaN(amount))\n\t{\n\t\tres.end(amount + \" ist keine gültige Zahl\");\n\t\treturn;\t\n\t}\n\t\n\tgenFile(amount,outputPath,res,number_file_gen.gen);\n});\n\n//Get CreateAlph\napp.get('/createAlphFile/:amount', function(req, res) {\n    console.log(req.params);\n    var amount = req.params.amount;\n\tvar outputPath = inputfolder+\"Alph\"+amount+\".txt\";\n\t\n\tif(isNaN(amount))\n\t{\n\t\tres.end(amount + \" ist keine gültige Zahl\");\n\t\treturn;\t\n\t}\n\tgenFile(amount,outputPath,res,alpha_file_gen.gen);\n\t\n\t\n});\n\n//Get Merge\napp.get('/MergeFS/:file1/:file2', async function(req, res) {\n\t\n   \n    console.log(req.params);\n    var file1 = req.params.file1;\n\tvar file2 = req.params.file2;\n\tvar file1Path = inputfolder + file1;\n\tvar file2Path = inputfolder + file2;\n\tvar outputPath = outputfolder+\"Merged-\"+file1+\"-\"+file2+\".txt\"\n\t\n\tMergeFSS(file1Path,file2Path,outputPath,res);\n});\n\n\n//AsyncFunctions\n\nasync function MergeFSS(file1Path,file2Path,outputPath,res)\n{\n\tfs.access(file1Path, fs.constants.F_OK | fs.constants.W_OK, (err) => {\n\t\tif (err) {\n\t\t\tres.send(\n\t\t\t\\` `+ '$' + `{file1Path} `+ '$' + `{err.code === 'ENOENT' ? 'does not exist' : 'is read-only'}\\`);\n\t\t} else {\n\t\t\tfs.access(file2Path, fs.constants.F_OK | fs.constants.W_OK, async (err) => {\n\t\t\t\tif (err) {\n\t\t\t\tres.send(\n\t\t\t\t\t\\``+ '$' + `{file2Path} `+ '$' + `{err.code === 'ENOENT' ? 'does not exist' : 'is read-only'}\\`);\n\t\t\t\t} else {\n   \n   \n\t\n\t\t\t\t\tawait merge_files.merge(file1Path,file2Path,outputPath);\n\t\t\t\t\tres.download(__dirname +\"/\"+ outputPath);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\t\n\t\n}\nasync function genFile(amount,outputPath,res,genMethod)\n{\n\tawait genMethod(amount,outputPath);\n\t\n    res.download(__dirname +\"/\"+ outputPath);\n}\n\n\n\n\t\t\n\t\t</code>\n\t</pre>\n\t</details>\n\t\n\n\n\n\n`;\n\n  article.insertAdjacentHTML('beforeend', section);\n\n  return section;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACjCA;AAEA;AACA;AAAA;AAEA;AAoSA;AAEA;AACA;;;;A","sourceRoot":""}