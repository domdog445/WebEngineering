{"version":3,"file":"main.7ef284369c4498162aaa.hot-update.js","sources":["webpack:///./stories/Ubung7/Page7Merge.js"],"sourcesContent":["export const createPage6MergeFiles = ({\n\n}) => {\n  const article = document.createElement('article');\n\n  const section = `\n  <script src=\"/Style/prism.js\"></script>\n  <link rel=\"stylesheet\" href=\"/Style/prism.css\">\n  <p>In dieser Aufgabe sollten zwei Node Kommandozeilen-Tools entwickelt werden. Beide Tools, sollen hierbei die vorhin erstellten Dateien Zeilenweise mergen können. Das eine Tool funktioniert mithilfe von FS und das andere mithilfe von Streams </p>\n  \n\n  <details>\n  <summary> Source Code des Merge Files (merge_files.mjs)</summary>\n\n\n  <pre>\n\t\t<code class=\"language-javascript\">\n\t\timport fs from \"fs\"\n\n\t\texport function MergeFsFile(file1,file2,OutputName)\n\t\t{\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tPromise.all([getPromiseReadFile(file1), getPromiseReadFile(file2)])\n\t\t\t\t\t.then((values) => {\n\t\t\t\t\tfs.writeFile(OutputName, MergeStrings(values[0],values[1]), (err) => {\n\t\t\t\t\t\tif (err) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('Merge successfull');\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t});\t  \n\t\t\t});\n\t\t\t\t\n\t\t\t\n\t\t}\n\n\t\texport function getPromiseReadFile(filename)\n\t\t{\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tfs.readFile(filename, \"utf8\", function(err, data){\n\t\t\t\t\tif (err) \n\t\t\t\t\t\treject(err); \n\t\t\t\t\telse\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t}\n\n\t\texport function MergeStrings(String1,String2)\n\t\t{\n\t\t\tvar allA = String1.split(\"\\r\\n\");\n\t\t\tvar allB = String2.split(\"\\r\\n\");\n\t\t\tvar result = \"\";\t\t\t\n\t\t\tvar i = 0;\t\n\t\t\twhile(i < allA.length || i < allB.length)\n\t\t\t{\n\t\t\t\tif(i < allA.length)\n\t\t\t\t{\n\t\t\t\t\tresult += allA[i];\n\t\t\t\t}\n\t\t\t\tif(i < allB.length)\n\t\t\t\t{\n\t\t\t\t\tresult += allB[i];\n\t\t\t\t}\n\t\t\t\tresult += \"\\r\\n\";\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t\n\t\t</code>\n\t</pre>\n\t</details>\n\t<a href=\"/U7/outputfile.txt\">Ergebnisdatei</a>\n\t<br>\n\t<br>\n\t<details>\n\t<summary> Source Code des Stream Mergers(merge_streams.mjs)</summary>\n  \n  \n\t<pre>\n\t\t  <code class=\"language-javascript\">\n\t\t  import fs from \"fs\"\n\t\t  import { PassThrough } from 'stream'\n\t\t  import readline from 'readline';\n\t\t  import {pipeline } from 'stream/promises';\n\t\t  \n\t\t  \n\t\t  var\tarr1 = [];\n\t\t  var\tarr2 = [];\n\t\t  var finished1 = false;\n\t\t  var finished2 = false;\n\t\t  /*\n\t\t  if(process.argv.length >= 4)\n\t\t\t  FSReadFileStream([process.argv[2],process.argv[3],process.argv[4]])\n\t\t  else\n\t\t  {\n\t\t\t  console.log(\"node [filename1] [filename2] [OutputFile]\");\n\t\t  }*/\n\t\t  \n\t\t  \n\t\t  export async function MergeFileStream(file1,file2,OutputName)\n\t\t  {\n\t\t\t  return new Promise(async(resolve, reject) => {\n\t\t\t\t  const ReadStream1 = fs.createReadStream(file1,\"utf8\");\n\t\t\t\t  const ReadStream2 = fs.createReadStream(file2,\"utf8\");\n\t\t\t\t  const WriteStream = fs.createWriteStream(OutputName);\n\t\t\t\t  \n\t\t\t\t  \n\t\t\t\t  await pipeline(ReadStream2,\n\t\t\t\t\t  async function(source)\n\t\t\t\t\t  {\n\t\t\t\t\t  source.setEncoding('utf8')\n\t\t\t\t\t\t  for await (const chunk of source)\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  arr1 = merge2ArraysPerLine(arr1,chunk.split(\"\\r\\n\"));\n\t\t\t\t\t\t\t  MergeStrings(WriteStream);\n\t\t\t\t\t\t\t  WriteStream.write(\"-AA-\");\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  );\n\t\t\t\t  await pipeline(ReadStream1,\n\t\t\t\t\t  async function(source)\n\t\t\t\t\t  {\n\t\t\t\t\t  source.setEncoding('utf8')\n\t\t\t\t\t\t  for await (const chunk of source)\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  arr2 = merge2ArraysPerLine(arr2,chunk.split(\"\\r\\n\"));\n\t\t\t\t\t\t\t  await MergeStrings(WriteStream);\n\t\t\t\t\t\t\t  WriteStream.write(\"-BB-\");\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  );\n\t\t\t\t  \n\t\t\t\t  \n\t\t\t\t  console.log(\"End\");\n\t\t\t\t  WriteStream.end();\n\t\t\t\t  resolve();\n\t\t\t  \n\t\t\t  });\n\t\t\t  \n\t\t  }\n\t\t  \n\t\t  \n\t\t  function merge2ArraysPerLine(a1,a2)\n\t\t  {\n\t\t\t  var result = [];\n\t\t\t  if(a1.length >= 1)\n\t\t\t  {\n\t\t\t\t  \n\t\t\t\t  var tmp = a1.at[a1.length - 1] + a1[0];\n\t\t\t\t  \n\t\t\t\t  var tmps = tmp.split(\"\\r\\n\");\n\t\t\t\t  \n\t\t\t\t  result = a1.slice(0, -1)\n\t\t\t\t  result.concat(tmps);\n\t\t\t\t  result.concat(a2.slice(0, -1));\n\t\t\t\t  return result;\n\t\t\t  }\n\t\t\t  else\n\t\t\t  {\n\t\t\t\t  return a2;\n\t\t\t  }\n\t\t\t  \n\t\t  }\n\t\t  \n\t\t  function getPromiseReadFile(filename)\n\t\t  {\n\t\t\t  return new Promise(function(resolve, reject) {\n\t\t\t\t  fs.readFile(filename, \"utf8\", function(err, data){\n\t\t\t\t\t  if (err) \n\t\t\t\t\t\t  reject(err); \n\t\t\t\t\t  else\n\t\t\t\t\t\t  resolve(data);\n\t\t\t\t  });\n\t\t\t  });\n\t\t\t  \n\t\t  }\n\t\t  \n\t\t  async function MergeStrings(WriteStream)\n\t\t  {\n\t\t\t  \n\t\t\t  while((arr1.length >1 || finished1) &&\n\t\t\t\t\t(arr2.length >1 || finished2) \n\t\t\t  )\n\t\t\t  {\n\t\t\t\t  if (finished1 && finished2 && arr1.length ==0 && arr2.length == 0)\n\t\t\t\t\t  return;\n\t\t  \n\t\t\t  \n\t\t\t\t  var result = \"\"\n\t\t\t\t  if(arr1.length>0)\n\t\t\t\t  {\n\t\t\t\t\t  result += arr1[0];\n\t\t\t\t\t  arr1.splice(0, 1);\n\t\t\t\t  }\n\t\t\t\t  if(arr2.length>0)\n\t\t\t\t  {\n\t\t\t\t\t  result += arr2[0];\n\t\t\t\t\t  arr2.splice(0, 1);\n\t\t\t\t  }\n\t\t\t\t  result += \"\\r\\n\";\n\t\t\t\t\t  \n\t\t\t\t  WriteStream.write(result);\n\t\t\t\t  //console.log(\"A: \" + result);\n\t\t\t  }\n\t\t\t  return result;\n\t\t  }\n\t\t  \n\t\t  </code>\n\t  </pre>\n\t  </details>\n\t  \n\t  <br>\n<h3>Um diese beiden Tools zu vergleichen, wurde ein weiteres Skript geschrieben. Der Quellcode für die Zeitmessung ist unter denerhalb der Ergebnisse aufgezeigt</h3>\n<br>\n<style type=\"text/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n.tg .tg-7btt{border-color:inherit;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-6ic8{border-color:inherit;font-weight:bold;text-align:right;vertical-align:top}\n.tg .tg-dvpl{border-color:inherit;text-align:right;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n</style>\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th class=\"tg-7btt\">Mitarbeiter</th>\n    <th class=\"tg-6ic8\">Monatsgehalt</th>\n    <th class=\"tg-7btt\">Dauer <br>(Personenmonate)</th>\n    <th class=\"tg-6ic8\">Jahreskosten</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-c3ow\">Domenic Zens</td>\n    <td class=\"tg-dvpl\">4.500 €/Monat</td>\n    <td class=\"tg-c3ow\">12<br>(10.5)</td>\n    <td class=\"tg-dvpl\">54.000 €<br></td>\n  </tr>\n  <tr>\n    <td class=\"tg-c3ow\">Max Mustermann</td>\n    <td class=\"tg-dvpl\">4.500 €/Monat</td>\n    <td class=\"tg-c3ow\">12<br>(10.5)</td>\n    <td class=\"tg-dvpl\">54.000 €</td>\n  </tr>\n  <tr>\n    <td class=\"tg-c3ow\">Gesamt</td>\n    <td class=\"tg-dvpl\">9.000 €/Monat</td>\n    <td class=\"tg-0pky\"></td>\n    <td class=\"tg-6ic8\">108.000 €</td>\n  </tr>\n</tbody>\n</table>\n<br>\n\n\t  <details>\n\t  <summary> Source Code für der Zeitmessung (timeMeassure.mjs)</summary>\n\t\n\t\n\t  <pre>\n\t\t\t<code class=\"language-javascript\">\n\t\t\timport fs from \"fs\"\n\t\t\timport {MergeFileStream} from \"./merge_streams.mjs\"\n\t\t\timport {MergeFsFile} from \"./merge_files.mjs\"\n\t\t\timport {genAlphaFile} from \"./alpha_file_gen.mjs\"\n\t\t\timport {genNumberFile} from \"./number_file_gen.mjs\"\n\t\t\t\n\t\t\t\n\t\t\tvar arr = [0,1,2,3,4]\n\t\t\tarr[arr.length - 1]=55\n\t\t\tconsole.log(arr.at(-1))\n\t\t\tlet ready1 = false;\n\t\t\tlet ready2 = false;\n\t\t\t\n\t\t\t\n\t\t\ttest();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tasync function genFiles()\n\t\t\t{\n\t\t\t\tconsole.time(\"Generate Files\");\n\t\t\t\tawait Promise.all([genNumberFile(20000,\"inputNumb20000.txt\"),\n\t\t\t\t\t\t\t\t\tgenAlphaFile(20000,\"inputAlph20000.txt\"),\n\t\t\t\t\t\t\t\t\tgenNumberFile(10,\"inputNumb10.txt\"),\n\t\t\t\t\t\t\t\t\tgenAlphaFile(10,\"inputAlph10.txt\"),\n\t\t\t\t\t\t\t\t\tgenNumberFile(1000,\"inputNumb1000.txt\"),\n\t\t\t\t\t\t\t\t\tgenAlphaFile(1000,\"inputAlph1000.txt\"),\n\t\t\t\t\t\t\t\t\tgenNumberFile(123456,\"inputNumb123456.txt\"),\n\t\t\t\t\t\t\t\t\tgenAlphaFile(123456,\"inputAlph123456.txt\")]);\n\t\t\t\tconsole.timeEnd(\"Generate Files\")\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tasync function test()\n\t\t\t{\n\t\t\t\tconsole.time(\"Generate Files\");\n\t\t\t\tawait Promise.all([genNumberFile(10000 ,\"input1.txt\"),\n\t\t\t\t\t\t\t\t\tgenAlphaFile(10000 ,\"input2.txt\")]);\n\t\t\t\tconsole.timeEnd(\"Generate Files\")\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tconsole.time(\"MergeFileStream\");\n\t\t\t\tawait MergeFileStream(\"input1.txt\",\"input2.txt\",\"outputstream.txt\") \n\t\t\t\tconsole.timeEnd(\"MergeFileStream\")\n\t\t\t\n\t\t\t\tconsole.time(\"MergeFsFile\");\n\t\t\t\tawait MergeFsFile(\"input1.txt\",\"input2.txt\",\"outputfile.txt\")\n\t\t\t\tconsole.timeEnd(\"MergeFsFile\")\n\t\t\t}\n\t\t  \n  \n  \n\t\t\t\n\t\t\t</code>\n\t\t</pre>\n\t\t</details>\n`;\n\n  article.insertAdjacentHTML('beforeend', section);\n\n  return section;\n};\n"],"mappings":";;;;;;;;;;;;;;AAAA;AAEA;AACA;AAAA;AAEA;AAyUA;AAEA;AACA;;;;A","sourceRoot":""}