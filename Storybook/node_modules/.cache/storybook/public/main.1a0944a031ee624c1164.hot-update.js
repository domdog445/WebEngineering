webpackHotUpdate("main",{

/***/ "./stories/Ubung11/Page11WATGGT.js":
/*!*****************************************!*\
  !*** ./stories/Ubung11/Page11WATGGT.js ***!
  \*****************************************/
/*! exports provided: createPage11WatGGT */
/*! exports used: createPage11WatGGT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createPage11WatGGT; });
function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

var createPage11WatGGT = function createPage11WatGGT(_ref) {
  _objectDestructuringEmpty(_ref);

  var article = document.createElement('article');
  var section = "\n  <script src=\"/Style/prism.js\"></script>\n  <link rel=\"stylesheet\" href=\"/Style/prism.css\">\n  <p>In dieser Aufgabe sollten zwei Node Kommandozeilen-Tools entwickelt werden. Die erste Anwendung soll eine Datei erstellen welche mit Zahlen gef\xFChlt ist. Die andere Erstellt eine Datei welche mit Buchstaben gef\xFChlt ist. Die Anzahl der Zeilen k\xF6nnen als Parameter \xFCbergeben werden </p>\n  <link rel=\"stylesheet\" href=\"/Style/SummaryStyle.css\">\n\n  <details>\n  <summary> Source Code ggt.wat</summary>\n\n\n  <pre>\n\t\t<code>\n\t\t(module\n\t\t\t(func (export \"ggt\") (param i32)(param i32) (result i32)\n\t\t\t  (call $innerggt\n\t\t\t\t(get_local 0)\n\t\t\t\t(get_local 1)\n\t\t\t   )\n\t\t\t)\n\t\t\t(func $innerggt (param i32)(param i32) (result i32)\n\t\t\t  (if(result i32)\n\t\t\t   (i32.eq\n\t\t\t\t(i32.rem_s\n\t\t\t\t (get_local 0)\n\t\t\t\t (get_local 1)\n\t\t\t\t)\n\t\t\t\t(i32.const 0\n\t\t\t\t)\n\t\t\t   )\n\t\t\t   (then (get_local 1))\n\t\t\t   (else(call $innerggt\n\t\t\t\t(get_local 1)\n\t\t\t\t (i32.rem_s\n\t\t\t\t (get_local 0)\n\t\t\t\t (get_local 1))\n\t\t\t   ))\n\t\t\t  )\n\t\t\t)\n\t\t  )\n\t\t  \n\t\t\n\t\t</code>\n\t</pre>\n\t</details>\n  \n\n\n\t\t\t\t\t\n<script>\n\nvar MessungWASM = [[],[],[],[],[]];\nfetch('/U11/ggt.wasm').then(response =>\n  response.arrayBuffer()\n).then(bytes =>\n  WebAssembly.instantiate(bytes,{})\n).then(wasmInstance => {\n    console.time(\"CalcPrim-WASM\")\n    const {ggt} = wasmInstance.instance.exports;\n\n    for(var i = 0; i <10;i++)\n    {\n        MessungWASM[0].push(TimeTestFunction(testPrims,10))\n        MessungWASM[1].push(TimeTestFunction(testPrims,100))\n        MessungWASM[2].push(TimeTestFunction(testPrims,1000))\n        MessungWASM[3].push(TimeTestFunction(testPrims,10000))\n        MessungWASM[4].push(TimeTestFunction(testPrims,100000))\n    }\n    \n    for (var i = 0; i<5;i++)\n    {\n        element = document.getElementById(\"R\"+(Math.pow(10,(i+1))));\n        \n        var Messergebniss = getBenchmark(MessungJS[i])\n\n        addTD(Messergebniss.min,element);\n        addTD(Messergebniss.max,element);\n        addTD(Messergebniss.avg,element);\n\n        var Messergebniss = getBenchmark(MessungWASM[i])\n\n        addTD(Messergebniss.min,element);\n        addTD(Messergebniss.max,element);\n        addTD(Messergebniss.avg,element);\n\n        addTD(MessungJS[i][0].result,element);\n    }\n        \n\n    \n});\n\n\n\n\n\n\n</script>\n\n\n\n";
  article.insertAdjacentHTML('beforeend', section);
  return section;
};

/***/ })

})
//# sourceMappingURL=main.1a0944a031ee624c1164.hot-update.js.map