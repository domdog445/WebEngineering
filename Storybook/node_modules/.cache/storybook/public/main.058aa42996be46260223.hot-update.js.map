{"version":3,"file":"main.058aa42996be46260223.hot-update.js","sources":["webpack:///./stories/Ubung3/Page3.js"],"sourcesContent":["export const createPage3 = () => {\n  const article = document.createElement('article');\n\n  const section = `\n  <html lang=\"de\">\n<head>\n    <link rel=\"icon\" href=\"../Ressource/favicon.svg\" sizes=\"any\" type=\"image/svg+xml\">\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title> JavaScript</title>\n\t<style>\n\t#console {\n\t\tbackground-color: #000000;\n\t\tcolor: #00FF00;\n\t\theight: auto;\n\t\tmin-height: 20em;\n\t}\n\t\n\tpre {\n\t\tbackground-color: #DDDDDD;\n\t\tpadding: 10px 10px 10px 20px\n\t}\n\t\n\t.flexContainer{\n\t\tdisplay: flex;\n\t\theight: 100%;\n\t\talign-items: center;\n  \t\tjustify-content: center;\n\t}\n\t.ConsoleContainer{\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgrid-area: \"ConsoleContainer\";\n\t}\n\t\n\t.AufgabenContainer{\n\t\tdisplay: flex;\n\t\theight: 100%;\n\t\t\n  \t\tjustify-content: center;\n\t\talign-items: stretch;\n\t\tgrid-area: \"AufgabenContainer\";\n\t}\n\t.Aufgabehidden\n\t{\n\tvisibility:hidden;\n\t\n\theight: 0px;\n\twidth: 0px;\n\tmargin: 0px 0px 0px 0px;\n\tdisplay:none;\n\t}\n\t.Aufgabevisible\n\t{\n\tvisibility:visible;\n\twidth: 100%;\n\tmargin: 0px 0px 0px 0px;\n\tdisplay: inline-block;\n\t}\n\n\tbody\n\t{\n\t\tdisplay: grid;\n\t\tgrid-template-columns:1fr auto;\n\t\tgrid-template-areas: \"Nav Nav\"\n\t\t\t\t\t\t\t \"AufgabeContainer ConsoleContainer\"\n\t}\n\t\n\tbutton{\n\t\tfont-size: 20px;\n\t\tbackground-color: #9999FF;\n\t\tpadding: 5px 10px 5px 10px ;\n\t\tborder-radius: 10px 10px 10px 10px;\n\t}\n\t.NavButtons{\n\t\tgrid-area: Nav;\n\t}\n\n\t@media only screen and (max-width: 600px) {\n\t\tbody\n\t\t{\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-columns:1fr;\n\t\t\tgrid-template-areas: \"Nav\"\n\t\t\t\t\t\t\t\t \"AufgabeContainer\" \n\t\t\t\t\t\t\t\t \"ConsoleContainer\"\n\t\t}\n\t}\n\n\t</style>\n\t\n</head>\n\n<script>\n//Webseiten Funktionen\nfunction simple_display_function(x)\n{\n\tdocument.getElementById(\"Console\").innerHTML += x +\"<br>\";\n}\nfunction function_call_bin_display_function(f,x,y)\n{\n\ttry\n\t{\n\t\tdocument.getElementById(\"Console\").innerHTML += f(x,y) +\"<br>\";\n\t}\n\tcatch (e)\n\t{\n\t\tsimple_display_function(e);\n\t}\n}\nfunction function_call_uni_display_function(f,x)\n{\n\ttry\n\t{\n\t\tdocument.getElementById(\"Console\").innerHTML += f(x) +\"<br>\";\n\t}\n\tcatch (e)\n\t{\n\t\tsimple_display_function(e);\n\t}\n}\n\n\nfunction uni_display_function(f,x)\n{\n\tdocument.getElementById(\"Console\").innerHTML += f(x) +\"<br>\";\n}\nfunction uni_uni_display_function(f,x,y)\n{\n\tdocument.getElementById(\"Console\").innerHTML += f(x)(y) +\"<br>\";\n}\nfunction bin_display_function(f,x,y)\n{\n\tdocument.getElementById(\"Console\").innerHTML += f(x,y) +\"<br>\";\n}\nfunction clearConsole()\n{\n\tdocument.getElementById(\"Console\").innerHTML =\"\";\n}\n\n\n\n//Get Inputs\nfunction getInput1()\n{\n\treturn document.querySelector('#Input1').value;\n}\nfunction getInput1int()\n{\n\treturn parseInt(getInput1() ? getInput1() : 0);\n}\nfunction getInput2()\n{\n\treturn document.querySelector('#Input2').value;\n}\nfunction getInput2int()\n{\n\treturn parseInt(getInput2() ? getInput2() : 0);\n}\n\nfunction getInput3()\n{\n\treturn document.querySelector('#Input3').value;\n}\nfunction getInput3int()\n{\n\treturn parseInt(getInput3() ? getInput3() : 0);\n}\n\n//Standart Funktionen\nfunction add(x,y)\n{\n  return x + y;\n}\nfunction mul(x,y)\n{\n  return x * y;\n}\n\n//Funktionen der Aufgabe 1 \nfunction identity_function(par)\n{\n  return function()\n  {\n\treturn par;\n  }\n}\n\t\n////////////////////////////\nfunction addf(x)\n{\n  return function(y){\n\treturn x+ y;\n  }\n}\n\t\n////////////////////////////\nfunction applyf(op)\n{\n\t  return function(x)\n\t  {\n\t  return function (y)\n\t  {\n\t\treturn op(x,y);\n\t  }\n\t  }\n}\n\n////////////////////////////\n\nfunction curry(f,x)\n{\n  return function(y)\n  {\n    return f(x,y);\n  }\n\n}\n\nconst inc1 = addf(1);\nconst inc2 = applyf(add)(1)\nconst inc3 = curry(add,1)\n\n////////////////////////////\n\nfunction methodize(f)\n{\n  return function(y)\n  {\n\t  return f(this,y);\n  }\n}\n\nNumber.prototype.add = methodize(add);\nNumber.prototype.mul = methodize(mul);\n\n////////////////////////////\n\nfunction demethodize(f)\n{\n  return function(x,y)\n  {\n\t  return f.call(x,y);\n  }\n}\n\n////////////////////////////\nfunction twice(f)\n{\n  return function(x)\n\t{\n\t  return f(x,x);\n\t}\n}\n\ndouble = twice(add);\nsquare = twice(mul);\n\n////////////////////////////\n\nfunction composeu(f1,f2)\n{\n  return function f(x)\n  {\n\treturn f2(f1(x));\n  }\n}\n\n////////////////////////////\n\nfunction composeb(f1,f2)\n{\n  return function (x,y,z)\n  {\n    return f2(f1(x,y),z);\n  }\n\n}\n\n////////////////////////////\n\nfunction once(f)\n{\n  var count = 0;\n  return function(x,y)\n  {\n\tif(count ===0)\n\t{\n\t  count ++;\n\t  return f(x,y);\n\t}\n\telse\n\t{\n\t  throw \"Fehler Mehrfachnutzung\";\n\t}\n  }\n}\nadd_once = once(add);\nmul_once = once(mul);\n\n\n////////////////////////////\n\n\nfunction counterf(start)\n{\n  \n  var count = start;\n  return {\n\t  inc: function()\n\t  {\n\t\tcount++;\n\t\treturn count;\n\t  },\n\t  dec: function()\n\t  {\n\t\tcount--;\n\t\treturn count;\n\t  }\n  }\n}\n\t\ncounter = counterf(10);\n\n////////////////////////////\n\nfunction revocable(_f)\n{\n  var f=_f\n  return{\n\tinvoke: function(x){\n\t  if(f==null)\n\t\tthrow \"function is revoked\";\n\t  return f(x);\n\t},\n\trevoke: function()\n\t{\n\t  f=null;\n\t}\n  }\n}\n\ntemp = revocable(alert);\n\n////////////////////////////\nfunction vector()\n{\n  var elements = [];\n  return {\n\t\t\n\tget: function(i)\n\t{\n\t  return elements[i];\n\t},\n\tstore: function(i,x)\n\t{\n\t  elements[i] = x;\n\t},\n\tappend: function(x)\n\t{\n\t  elements.push(x);\n\t}\n  }\n}\n\nmy_vector = vector();\nmy_vector.append(7);\nmy_vector.store(1, 8);\n\t\n\t\n////////////////////////////\t\n//Funktionen der Aufgabe 2\n////////////////////////////\t\nfunction pubsub()\n{\n\t  var subscribers = [];\n\t\treturn {\n\t\t\t\n\t\tsubscribe: function(f)\n\t\t{\n\t\t  subscribers.push(f)\n\t\t},\n\tpublish: function(x)\n\t\t{\n\t\t  subscribers.forEach(subscriber => subscriber(x));\n\t\t}\n\t\t\n  }\n}\n\nmy_pubsub = pubsub();\t\n\n////////////////////////////\t\nfunction gensymf(x)\n{\n  var sym= x;\n  var count = 0;\n  return function()\n  {\n\tvar result = x+count;\n\tcount++;\n\treturn result;\n  }\n}\ngensym = gensymf('G');\n\n////////////////////////////\t\n\nfunction fibonaccif(x,y)\n{\n  var a = x;\n  var b = y;\n  return function()\n  {\n\tvar result = a;\n\tvar c = a+b;\n\ta = b;\n\tb = c;\n\n\n\n\treturn result;\n  }\n}\n\n////////////////////////////\t\n\nfib = fibonaccif(0, 1);\n\nfunction addg(x)\n{\n  function inner(y)\n  {\n\tif(y !== undefined)\n\t{\n\t  x+=y;\n\t  return inner;\n\t}\n\telse\n\t{\n\t  return x;\n\t}\n\t   \n  }\n  if (x !== undefined)\n  {\n\treturn inner;\n  }\n}\n\n////////////////////////////\t\nfunction applyg(f)\n{\n  var x=0;\n  function inner(y)\n  {\n\n    if(y !== undefined)\n    {\n      x= f(x,y);\n      return inner;\n    }\n    else\n    {\n      return x;\n    }\n  }\n  return inner;\n}\n////////////////////////////\t\nfunction m(x,s)\n{\n  if(s===undefined)\n  {\n\treturn {\n\t  value: x,\n\t  source: String(x) \n\t};\n  }\n  else\n  {\n\treturn {\n\t  value: x,\n\t  source: s\n\t};\n  }\n}\n\n////////////////////////////\n\nfunction addm(x,y)\n{\n  return {\n\t  value: x.value + y.value,\n\t  source: \"(\" + x.source + \"+\" + y.source+ \")\" \n\t};\n}\n\n////////////////////////////\n\nfunction binarymf(f,s)\n{\n  return function(x,y)\n  {\n\treturn {\n\t  value: (f(x.value,y.value)),\n\t  source: \"(\" + x.source + s + y.source+ \")\" \n\t}\n   };\n}\n\t\naddm2 = binarymf(add, \"+\"); \nmulm2 = binarymf(mul, \"*\"); \n\t\n////////////////////////////\t\nfunction binarymf2(f,s)\n{\n  return function(x,y)\n  {\n\tif(typeof(x) ===\"number\")\n\t{\n\t  x=m(x);\n\t}\n\tif(typeof(y) ===\"number\")\n\t{\n\t  y=m(y);\n\t}\n\treturn {\n\t  value: (f(x.value,y.value)),\n\t  source: \"(\" + x.source + s + y.source+ \")\" \n\t}\n   };\n}\n\t\naddm3 = binarymf2(add, \"+\"); \nmulm3 = binarymf2(mul, \"*\"); \t\n\n////////////////////////////\n\t\nfunction unarymf(f,s)\n{\n  return function(x)\n  {\n    if(typeof(x) ===\"number\")\n    {\n      x=m(x);\n    }\n    return {\n      value: (f(x.value)),\n      source: s+\"(\" + x.source+\")\" \n    }\n   };\n}\t\n\t\nsquarem = unarymf(square, \"square\");\ndoublem = unarymf(double, \"double\");\n\n////////////////////////////\n\nfunction hyp(x,y)\n{\n  return Math.sqrt((x*x) + (y*y))\n}\n\n////////////////////////////\n\nfunction exp(arr)\n{\n  if(Array.isArray(arr))\n  {\n\tvar f = arr[0];\n\tvar x = arr[1];\n\tvar y = arr[2];\n\n\treturn f(exp(x),exp(y));\n  }\n  else\n  {\n\treturn arr;\n  }\n}\n\n////////////////////////////\n\nvar variable = 0;\n\nfunction store(x)\n{\n  variable = x;\n}\n\n////////////////////////////\n\nfunction quatre(f,fx,fy,fout)\n{\n  fout(f(fx(),fy()));\n}\n\n////////////////////////////\n\nfunction unaryc(f)\n{\n  return function(x,callback)\n  {\n\tcallback(f(x));\n  }\n}\nvar sqrtc = unaryc(Math.sqrt); \nvar doublec = unaryc(double); \nvar squarec = unaryc(square); \n\n////////////////////////////\n\nfunction binaryc(f)\n{\n  return function(x,y,callback)\n  {\n\tcallback(f(x,y));\n  }\n}\n\nvar addc = binaryc(add); \nvar mulc = binaryc(mul); \n\n</script>\n\n\n<script>\n    var currentView = null;\n\tfunction viewAufgabe(i)\n\t{\n\t\tif(currentView === null)\n\t\t{\n\t\t\tcurrentView = document.getElementById(\"a0\");\n\t\t}\n\t\tcurrentView.className = \"Aufgabehidden\";\n\t\t\n\t\t\n\t\t\tcurrentView = document.getElementById(\"a\"+i);\n\t\t\n\t\tcurrentView.className = \"Aufgabevisible\";\n\t\t\n\t}\n</script>\n\n<body>\n<div class=\"NavButtons\">\n<Button onclick=\"viewAufgabe('0')\"> Erklärung</button>\n<Button onclick=\"viewAufgabe('1_1')\"> 1.1</button>\n<Button onclick=\"viewAufgabe('1_2')\"> 1.2</button>\n<Button onclick=\"viewAufgabe('1_3')\"> 1.3</button>\n<Button onclick=\"viewAufgabe('1_4')\"> 1.4</button>\n<Button onclick=\"viewAufgabe('1_5')\"> 1.5</button>\n<Button onclick=\"viewAufgabe('1_6')\"> 1.6</button>\n<Button onclick=\"viewAufgabe('1_7')\"> 1.7</button>\n<Button onclick=\"viewAufgabe('1_8')\"> 1.8</button>\n<Button onclick=\"viewAufgabe('1_9')\"> 1.9</button>\n<Button onclick=\"viewAufgabe('1_10')\"> 1.10</button>\n<Button onclick=\"viewAufgabe('1_11')\"> 1.11</button>\n<Button onclick=\"viewAufgabe('1_12')\"> 1.12</button>\n<Button onclick=\"viewAufgabe('1_13')\"> 1.13</button>\n<Button onclick=\"viewAufgabe('1_14')\"> 1.14</button>\n<Button onclick=\"viewAufgabe('2_1')\"> 2.1</button>\n<Button onclick=\"viewAufgabe('2_2')\"> 2.2</button>\n<Button onclick=\"viewAufgabe('2_3')\"> 2.3</button>\n<Button onclick=\"viewAufgabe('2_4')\"> 2.4</button>\n<Button onclick=\"viewAufgabe('2_5')\"> 2.5</button>\n<Button onclick=\"viewAufgabe('2_6')\"> 2.6</button>\n<Button onclick=\"viewAufgabe('2_7')\"> 2.7</button>\n<Button onclick=\"viewAufgabe('2_8')\"> 2.8</button>\n<Button onclick=\"viewAufgabe('2_9')\"> 2.9</button>\n<Button onclick=\"viewAufgabe('2_10')\"> 2.10</button>\n<Button onclick=\"viewAufgabe('2_11')\"> 2.11</button>\n<Button onclick=\"viewAufgabe('2_12')\"> 2.12</button>\n<Button onclick=\"viewAufgabe('2_13')\"> 2.13</button>\n<Button onclick=\"viewAufgabe('2_14')\"> 2.14</button>\n<Button onclick=\"viewAufgabe('2_15')\"> 2.15</button>\n<Button onclick=\"viewAufgabe('2_16')\"> 2.16</button>\n</div>\n<div class=\"AufgabenContainer\">\n\t<div class=\"Aufgabevisible\" id=\"a0\">\n\t<h3>Auf dieser Seite sind dir bearbeiteten JavaScript Aufgaben präsentiert. <br>\n\t\tDabei sind die Lösungen möglichst interaktiv aufbereitet und können per Buttondruck ausgeführt werden.\n\t\tDie dabei entstehende Ausgabe erscheint rechts im Console div<br>\n\t\tDie Inputs 1, 2 und 3 befinden sich ebenfalls rechts und können beliebig gefüllt werden.\n\t\tWird kein Wert eingetragen, wird der Wert 0 angenommen<br>\n\t\t<br>\n\t\tDer folgende Code, ist für mehrere Aufgaben wichtig, aber wurde nicht direkt gefragt. Deshalb wird er einmal hier aufgeführt\n\t\t</h3>\n\t\t\n\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction add(x,y)\n\t{\n\t  return x + y;\n\t}\n\tfunction mul(x,y)\n\t{\n\t  return x * y;\n\t}\n\t\t\t</code>\n\t\t</pre>\n\n\t</div>\n<!-- Aufgabe 1-->\n\t<div class=\"Aufgabehidden\" id=\"a1_1\">\n\t\t<h3>Schreiben Sie eine Funktion identity_function(), die ein Argument als Parameter entgegen nimmt und eine Funktion zurück gibt, die dieses Argument zurück gibt.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction identity_function(par)\n\t{\n\t  return function()\n\t  {\n\t\treturn par;\n\t  }\n\t}\n\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"simple_display_function(identity_function(5)())\"> identity_function(5)()</button>\n\t\t<button onclick=\"simple_display_function(identity_function(42)())\"> identity_function(42)()</button>\n\t\t<button onclick=\"simple_display_function(identity_function('hallo')())\"> identity_function(\"hallo\")()</button>\n\t\t<button onclick=\"simple_display_function(identity_function(getInput3())())\"> identity_function(Input3)()</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_2\">\n\t\t<h3>Schreiben Sie eine Addier-Funktion addf(), so dass addf(x)(y) genau x + y zurück gibt. \n\t\t    (Es haben also zwei Funktionsaufrufe zu erfolgen. addf(x) liefert eine Funktion, \n\t\t\tdie auf y angewandt wird.)</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction addf(x)\n\t{\n\t  return function(y){\n\t\treturn x+ y;\n\t  }\n\t}\n\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"uni_uni_display_function(addf,5,4)\"> addf(5)(4)</button>\n\t\t<button onclick=\"uni_uni_display_function(addf,10,2)\"> addf(10)(2)</button>\n\t\t<button onclick=\"uni_uni_display_function(addf,67,-25)\"> addf(67)(-25)</button>\n\t\t<button onclick=\"uni_uni_display_function(addf,getInput1int(),getInput2int())\"> addf(Input1)(Input2)</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_3\">\n\t\t<h3>Schreiben Sie eine Funktion applyf(), die aus einer binären Funktion wie add(x,y) \n\t\teine Funktion addfberechnet, die mit zwei Aufrufen das gleiche Ergebnis liefert, \n\t\tz.B. addf = applyf(add); addf(x)(y) soll add(x,y) liefern. Entsprechend \n\t\tapplyf(mul)(5)(6) soll 30 liefern, wenn mul die binäre Multiplikation ist.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction applyf(op)\n\t{\n\t   return function(x)\n\t   {\n\t\t  return function (y)\n\t\t  {\n\t\t\treturn op(x,y);\n\t\t  }\n\n\t   }\n\t}\n\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"uni_uni_display_function(applyf(mul),5,6)\"> applyf(mul)(5)(6)</button>\n\t\t<button onclick=\"uni_uni_display_function(applyf(add),12,21)\"> applyf(add)(12)(21)</button>\n\t\t<button onclick=\"uni_uni_display_function(applyf(mul),getInput1int(),getInput2int())\"> applyf(mul)(Input1)(Input2)</button>\n\t\t<button onclick=\"uni_uni_display_function(applyf(add),getInput1int(),getInput2int())\"> applyf(add)(Input1)(Input2)</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_4\">\n\t\t<h3>Schreiben Sie eine Funktion curry() (von Currying), \n\t\tdie eine binäre Funktion und ein Argument nimmt, \n\t\tum daraus eine Funktion zu erzeugen, die ein zweites Argument entgegen nimmt, \n\t\tz.B. add3 = curry(add, 3);add3(4) ergibt 7. curry(mul, 5)(6) ergibt 30.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction curry(f,x)\n\t{\n\t  return function(y)\n\t  {\n\t\treturn f(x,y);\n\t  }\n\n\t}\n\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"uni_display_function(curry(mul,5),6)\"> curry(mul,5)(6)</button>\n\t\t<button onclick=\"uni_display_function(curry(add,12),21)\"> curry(add,12)(21)</button>\n\t\t<button onclick=\"uni_display_function(curry(mul,getInput1int()),getInput2int())\"> curry(mul,Input1)(Input2)</button>\n\t\t<button onclick=\"uni_display_function(curry(add,getInput1int()),getInput2int())\"> curry(add,Input1)(Input2)</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_5\">\n\t\t<h3>Erzeugen Sie die inc-Funktion mit Hilfe einer der Funktionen addf, applyf und curry aus den letzten Aufgaben,\n\t\tohne die Funktion inc() selbst zu implementieren. (inc(x) soll immer x + 1 ergeben und lässt sich natürlich auch \n\t\tdirekt implementieren. Das ist aber hier nicht die Aufgabe.) Vielleicht schaffen Sie es auch, drei Varianten \n\t\tder inc()-Implementierung zu schreiben?</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tconst inc1 = addf(1);\n\tconst inc2 = applyf(add)(1)\n\tconst inc3 = curry(add,1)\n\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"uni_display_function(inc1,6)\"> inc1(6)</button>\t\t\n\t\t<button onclick=\"uni_display_function(inc1,getInput1int())\"> inc1(Input1)</button>\n\t\t\n\t\t<button onclick=\"uni_display_function(inc2,12)\"> inc2(12)</button>\n\t\t<button onclick=\"uni_display_function(inc2,getInput1int())\"> inc2(Input1)</button>\n\t\t\n\t\t<button onclick=\"uni_display_function(inc3,41)\"> inc3(41)</button>\n\t\t<button onclick=\"uni_display_function(inc3,getInput1int())\"> inc3(Input1)</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_6\">\n\t\t<h3>Schreiben Sie eine Funktion methodize(), die eine binäre Funktion (z.B. add, mul) in eine \n\t\tunäre Methode verwandelt. Nach Number.prototype.add = methodize(add); soll (3).add(4) genau 7 ergeben.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction methodize(f)\n\t{\n\t  return function(y)\n\t  {\n\t\t  return f(this,y);\n\t  }\n\t}\n\tNumber.prototype.add = methodize(add);\n\tNumber.prototype.mul = methodize(mul);\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"simple_display_function((3).add(4))\"> (3).add(4)</button>\t\t\n\t\t<button onclick=\"simple_display_function((getInput1int()).add(getInput2int()))\"> (Input1).add(Input2)</button>\n\t\t\n\t\t<button onclick=\"simple_display_function((3).mul(4))\"> (3).mul(4)</button>\t\t\n\t\t<button onclick=\"simple_display_function((getInput1int()).mul(getInput2int()))\"> (Input1).mul(Input2)</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_7\">\n\t\t<h3>Schreiben Sie eine Funktion demethodize(), die eine unäre Methode (z.B. add, mul) in eine binäre \n\t\tFunktion umwandelt. demethodize(Number.prototype.add)(5, 6) soll 11 ergeben.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction demethodize(f)\n\t{\n\t  return function(x,y)\n\t  {\n\t\t  return f.call(x,y);\n\t  }\n\t}\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"simple_display_function(demethodize(Number.prototype.add)(5, 6))\"> demethodize(Number.prototype.add)(5, 6)</button>\t\t\n\t\t<button onclick=\"simple_display_function(demethodize(Number.prototype.add)(getInput1int(), getInput2int()))\"> demethodize(Number.prototype.add)(Input1, Input2)</button>\n\t\t\n\t\t<button onclick=\"simple_display_function(demethodize(Number.prototype.mul)(5, 6))\"> demethodize(Number.prototype.mul)(5, 6)</button>\t\t\n\t\t<button onclick=\"simple_display_function(demethodize(Number.prototype.mul)(getInput1int(), getInput2int()))\"> demethodize(Number.prototype.mul)(Input1, Input2)</button>\n\t\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_8\">\n\t\t<h3>Schreiben Sie eine Funktion twice(), die eine binäre Funktion in eine unäre Funktion \n\t\tumwandelt, die den einen Parameter zweimal weiter reicht. Z.B. var double = twice(add); \n\t\tdouble(11) soll 22 ergeben; var square = twice(mul); square(11) soll mul(11,11) === 121 ergeben.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction twice(f)\n\t{\n\t  return function(x)\n\t\t{\n\t\t  return f(x,x);\n\t\t}\n\t}\n\n\tvar double = twice(add);\n\tvar square = twice(mul);\n\t\t\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"simple_display_function(double(5))\"> double(5)</button>\t\t\n\t\t<button onclick=\"simple_display_function(double(getInput1int()))\"> double(Input1)</button>\n\t\t\n\t\t<button onclick=\"simple_display_function(square(5))\"> twice(5)</button>\t\t\n\t\t<button onclick=\"simple_display_function(square(getInput1int()))\"> twice(Input1)</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_9\">\n\t\t<h3>Schreiben Sie eine Funktion composeu(), die zwei unäre Funktionen in eine einzelne \n\t\tunäre Funktion transformiert, die beide nacheinander aufruft, z.B. soll \n\t\tcomposeu(double, square)(3) genau 36 ergeben.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction composeu(f1,f2)\n\t{\n\t  return function f(x)\n\t  {\n\t\treturn f2(f1(x));\n\t  }\n\t}\n\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"simple_display_function(composeu(double, square)(3))\"> composeu(double, square)(3) </button>\t\t\n\t\t<button onclick=\"simple_display_function(composeu(double, square)(getInput1int()))\"> composeu(double, square)(Input1)</button>\n\t\t\n\t\t<button onclick=\"simple_display_function(composeu(square, double)(3))\"> composeu(square, double )(3) </button>\t\t\n\t\t<button onclick=\"simple_display_function(composeu(square, double)(getInput1int()))\"> composeu(square, double)(Input1)</button>\n\t\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_10\">\n\t\t<h3>Schreiben Sie eine Funktion composeb(), die zwei binäre Funktionen in eine einzelne Funktion transformiert, \n\t\tdie beide nacheinander aufruft, z.B. composeb(add, mul)(2, 3, 5) soll 25 ergeben.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction composeb(f1,f2)\n\t{\n\t  return function (x,y,z)\n\t  {\n\t\treturn f2(f1(x,y),z);\n\t  }\n\n\t}\n\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"simple_display_function(composeb(add, mul)(2, 3, 5))\"> composeb(add, mul)(2, 3, 5) </button>\t\t\n\t\t<button onclick=\"simple_display_function(composeb(add, mul)(getInput1int(),getInput2int(),getInput3int()))\"> composeb(add, mul)(Input1, Input2, Input3)</button>\n\n\t\t<button onclick=\"simple_display_function(composeb(mul, add)(2, 3, 5))\"> composeb(mul, add)(2, 3, 5) </button>\t\t\n\t\t<button onclick=\"simple_display_function(composeb(mul, add)(getInput1int(),getInput2int(),getInput3int()))\"> composeb(mul, add)(Input1, Input2, Input3)</button>\n\n\t\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_11\">\n\t\t<h3>Schreiben Sie eine Funktion once(), die einer anderen Funktion nur einmal erlaubt, \n\t\taufgerufen zu werden, z.B. add_once = once(add); add_once(3, 4) soll beim ersten Mal 7 ergeben, \n\t\tbeim zweiten Mal soll jedoch add_once(3, 4) einen Fehlerabbruch bewirken.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction once(f)\n\t{\n\t  var count = 0;\n\t  return function(x,y)\n\t  {\n\t\tif(count ===0)\n\t\t{\n\t\t  count ++;\n\t\t  return f(x,y);\n\t\t}\n\t\telse\n\t\t{\n\t\t  throw \"Fehler Mehrfachnutzung\";\n\t\t}\n\t  }\n\t}\n\t\n\tadd_once = once(add);\n\tmul_once = once(add);\n\t//add_once & mul_once sind bereits einmal gesetzt\n\t\n\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"add_once = once(add); simple_display_function('add_once reseted')\"> add_once = once(add);  </button>\t\t\n\t\t<button onclick=\"mul_once = once(add); simple_display_function('mul_once reseted')\"> mul_once = once(mul);  </button>\t\t\n\t\t\n\t\t<button onclick=\"function_call_bin_display_function(add_once,3, 4)\"> add_once(3, 4)</button>\n\t\t<button onclick=\"function_call_bin_display_function(add_once,getInput1int(), getInput2int())\"> add_once(Input1, Input2)</button>\n\t\t\n\t\t<button onclick=\"function_call_bin_display_function(mul_once,3, 4)\"> mul_once(3, 4)</button>\t\t\n\t\t<button onclick=\"function_call_bin_display_function(mul_once,getInput1int(), getInput2int())\"> mul_once(Input1, Input2)</button>\n\t\n\t\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_12\">\n\t\t<h3>Schreiben Sie eine Fabrik-Funktion counterf(), die zwei Funktionen inc() und dec() berechnet, \n\t\tdie einen Zähler hoch- und herunterzählen. Z.B. counter = counterf(10); \n\t\tDann soll counter.inc() 11 und counter.dec() wieder 10 ergeben.</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction counterf(start)\n\t{\n\t  \n\t  var count = start;\n\t  return {\n\t\t  inc: function()\n\t\t  {\n\t\t\tcount++;\n\t\t\treturn count;\n\t\t  },\n\t\t  dec: function()\n\t\t  {\n\t\t\tcount--;\n\t\t\treturn count;\n\t\t  }\n\t  }\n\t}\n\t\n\tcounter = counterf(10);\n\t\n\t</code>\n\t\t</pre>\n\n\t\t<button onclick=\"counter = counterf(10); simple_display_function('counter = counterf(10)')\"> counter = counterf(10);  </button>\t\t\n\t\t<button onclick=\"counter = counterf(getInput1int()); simple_display_function('counter = counterf(getInput1int())')\"> counter = counterf(Input1);  </button>\t\t\n\t\t\n\t\t<button onclick=\"simple_display_function(counter.inc())\"> counter.inc()</button>\n\t\t<button onclick=\"simple_display_function(counter.dec())\"> counter.dec()</button>\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_13\">\n\t\t<h3>Schreiben Sie eine rücknehmbare Funktion revocable(), \n\t\tdie als Parameter eine Funktion nimmt und diese bei Aufruf ausführt. \n\t\tSobald die Funktion aber mit revoke() zurück genommen wurde, \n\t\tführt ein erneuter Aufruf zu einem Fehler. Z.B.<br>\n\t\ttemp = revocable(alert);<br>\n\t\ttemp.invoke(7); // führt zu alert(7);<br>\n\t\ttemp.revoke();<br>\n\t\ttemp.invoke(8); // Fehlerabbruch!</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\t\n\tfunction revocable(_f)\n\t{\n\t  var f=_f\n\t  return{\n\t\tinvoke: function(x){\n\t\t  if(f==null)\n\t\t\tthrow \"function is revoked\";\n\t\t  return f(x);\n\t\t},\n\t\trevoke: function()\n\t\t{\n\t\t  f=null;\n\t\t}\n\t  }\n\t}\n\t\n\ttemp = revocable(alert);\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"temp = revocable(alert); simple_display_function('temp = revocable(alert);')\"> temp = revocable(alert);</button>\t\t\n\t<button onclick=\"temp.revoke(); simple_display_function('temp.revoke();')\"> temp.revoke();</button>\t\t\n\t\t\n\t<button onclick=\"function_call_uni_display_function(temp.invoke,7)\"> temp.invoke(7)</button>\n\t<button onclick=\"function_call_uni_display_function(temp.invoke,getInput3())\"> temp.invoke(Input3)</button>\n\t\n\t\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a1_14\">\n\n\t\t<h3>Implementieren Sie ein \"Array Wrapper\"-Objekt mit den Methoden get, \n\t\tstore und append, so dass ein Angreifer keinen \n\t\tZugriff auf das innere, private Array hat.\n<br>\n\t\tmy_vector = vector(); <br>\n\t\tmy_vector.append(7);<br>\n\t\tmy_vector.store(1, 8);<br>\n\t\tmy_vector.get(0) // 7<br>\n\t\tmy_vector.get(1) // 8 <br>\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\t\n\tfunction vector()\n\t{\n\t  var elements = [];\n\t  return {\n\t\t\t\n\t\tget: function(i)\n\t\t{\n\t\t  return elements[i];\n\t\t},\n\t\tstore: function(i,x)\n\t\t{\n\t\t  elements[i] = x;\n\t\t},\n\t\tappend: function(x)\n\t\t{\n\t\t  elements.push(x);\n\t\t}\n\t  }\n\t}\n\n\tmy_vector = vector();\n\tmy_vector.append(7);\n\tmy_vector.store(1, 8);\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"my_vector = vector(); simple_display_function('my_vector = vector();')\"> my_vector = vector()</button>\t\t\n\t<button onclick=\"my_vector.append(getInput3()); simple_display_function('my_vector.append('+getInput3()+')')\"> append(Input3)</button>\t\t\n\t<button onclick=\"my_vector.store(getInput1int(),getInput3()); simple_display_function('my_vector.store('+getInput1()+','+getInput3()+');')\"> store(Input1,Input3)</button>\t\t\n\t<button onclick=\"my_vector.get(getInput1int()); simple_display_function(my_vector.get(getInput1()))\"> get(Input1)</button>\t\t\n\t\t\n\t\n\t\t\n\n</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_1\">\n\n\t\t<h3>Make a function that makes a publish/subscribe object.\n\t\tIt will reliably deliver all publications to all subscribers in the right order.<br>\n\t\tmy_pubsub = pubsub();<br>\n\t\tmy_pubsub.subscribe(alert);<br>\n\t\tmy_pubsub.publish(\"It works!\"); // alert(\"It works!\") \n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\t\n\tfunction pubsub()\n\t{\n\t  var subscribers = [];\n\t\treturn {\n\t\t\t\n\t    subscribe: function(f)\n\t    {\n\t      subscribers.push(f)\n\t    },\n\t    publish: function(x)\n\t    {\n\t      subscribers.forEach(subscriber => subscriber(x));\n\t    }\n\t  \t\n\t  }\n\t}\n\n\tmy_pubsub = pubsub();\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"my_pubsub = pubsub(); simple_display_function('my_pubsub = pubsub()')\"> my_pubsub = pubsub()</button>\t\t\n\t\n\t<button onclick=\"my_pubsub.subscribe(alert); simple_display_function('subscribe(alert)')\"> subscribe(alert)</button>\t\t\n\t<button onclick=\"my_pubsub.subscribe(simple_display_function); simple_display_function('subscribe(console.log)')\"> subscribe(simple_display_function)</button>\t\t\n\t\n\t<button onclick=\"my_pubsub.publish('5');\"> publish('5')</button>\t\t\n\t<button onclick=\"my_pubsub.publish(getInput3());\"> publish(Input3)</button>\t\t\n\t\n\t\t\n\n</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_2\">\n\n\t\t<h3>Make a factory that makes functions that generate unique symbols.<br>\n\t\tgensym = gensymf('G'); <br>\n\t\tgensym() // 'G0'<br>\n\t\tgensym() // 'G1'<br>\n\t\tgensym() // 'G2'<br>\n\t\tgensym() // 'G3' \n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\t\n\n\tfunction gensymf(x)\n\t{\n\t  var sym= x;\n\t  var count = 0;\n\t  return function()\n\t  {\n\t\tvar result = x+count;\n\t\tcount++;\n\t\treturn result;\n\t  }\n\t}\n\n\tgensym = gensymf('G');\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"gensym = gensymf('G'); simple_display_function('gensym = gensymf(G)')\"> gensym = gensymf('G')</button>\t\n\t<button onclick=\"gensym = gensymf(getInput3()); simple_display_function('gensym = gensymf('+getInput3()+')')\"> gensym = gensymf(Input3)</button>\t\n\n\t<button onclick=\"simple_display_function(gensym())\"> gensym()</button>\t\t\n\t\n\t\n\t\n\t\t\n\n</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_3\">\n\n\t\t<h3>Make a function that returns a function that will return the next fibonacci number.<br>\n\t\t\tvar fib = fibonaccif(0, 1);<br>\n\t\t\tfib() // 0<br>\n\t\t\tfib() // 1<br>\n\t\t\tfib() // 1<br>\n\t\t\tfib() // 2<br>\n\t\t\tfib() // 3<br>\n\t\t\tfib() // 5  <br>\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\t\n\n\tfunction fibonaccif(x,y)\n\t{\n\t  var a = x;\n\t  var b = y;\n\t  return function()\n\t  {\n\t\tvar result = a;\n\t\tvar c = a+b;\n\t\ta = b;\n\t\tb = c;\n\n\n\n\t\treturn result;\n\t  }\n\n\t}\n\n\tfib = fibonaccif(0, 1);\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"fib = fibonaccif(0, 1); simple_display_function('fib = fibonaccif(0, 1);')\"> fib = fibonaccif(0, 1);</button>\t\n\t\n\t<button onclick=\"simple_display_function(fib())\"> fib()</button>\t\t\n\t\n\t\n\t\n\t\t\n\n</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_4\">\n\n\t\t<h3>Write a function that adds from many invocations, until it sees an empty invocation.<br>\n\t\t\taddg(3)(4)(5)() // 12<br>\n\t\t\taddg(1)(2)(4)(8)() // 15 <br>\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction addg(x)\n\t{\n\t  function inner(y)\n\t  {\n\t\tif(y !== undefined)\n\t\t{\n\t\t  x+=y;\n\t\t  return inner;\n\t\t}\n\t\telse\n\t\t{\n\t\t  return x;\n\t\t}\n\t   \n\t  }\n\t  if (x !== undefined)\n\t  {\n\t\treturn inner;\n\t  }\n\t}\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(addg(3)(4)(5)())\"> addg(3)(4)(5)()</button>\t\n\t<button onclick=\"simple_display_function(addg(1)(2)(4)(8)())\"> addg(1)(2)(4)(8)()</button>\t\n\t<button onclick=\"simple_display_function(addg(getInput1int())(getInput2int())())\"> addg(Input1)(Input2)()</button>\t\t\n\t\n\t\n\t\n\t\t\n\n</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_5\">\n\n\t\t<h3>Write a function that will take a binary function and apply it to many invocations.<br>\n\t\t\tapplyg(add)(3)(4)(5)() // 12<br>\n\t\t\tapplyg(add)(1)(2)(4)(8)() // 15 <br>\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction applyg(f)\n\t{\n\t  var x=0;\n\t  function inner(y)\n\t  {\n\n\t\tif(y !== undefined)\n\t\t{\n\t\t  x= f(x,y);\n\t\t  return inner;\n\t\t}\n\t\telse\n\t\t{\n\t\t  return x;\n\t\t}\n\t  }\n\t  return inner;\n\t}\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(applyg(add)(3)(4)(5)())\"> applyg(add)(3)(4)(5)()</button>\t\n\t<button onclick=\"simple_display_function(applyg(add)(1)(2)(4)(8)())\"> applyg(add)(1)(2)(4)(8)()</button>\t\n\t<button onclick=\"simple_display_function(applyg(add)(getInput1int())(getInput2int())())\"> applyg(add)(Input1)(Input2)()</button>\t\t\n\t\n\t\n\t\n\t\t\n\n</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_6\">\n\n\t\t<h3>Write a function m that takes a value and an optional source string and returns them in an object. <br>\n\t\tJSON.stringify(m(1)) // {\"value\": 1, \"source\": \"1\"} <br>\n\t\tJSON.stringify(m(Math.PI, \"pi\")) // {\"value\": 3.14159..., \"source\": \"pi\"}  <br>\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\tfunction m(x,s)\n\t{\n\t  if(s===undefined)\n\t  {\n\t\treturn {\n\t\t  value: x,\n\t\t  source: String(x) \n\t\t};\n\t  }\n\t  else\n\t  {\n\t\treturn {\n\t\t  value: x,\n\t\t  source: s\n\t\t};\n\t  }\n\t}\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(JSON.stringify(m(1)))\"> m(1)</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(m(Math.PI,'pi')))\"> m(Math.PI,'pi')</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(m(getInput2(),getInput3())))\"> m(Input2,Input3)</button>\t\n\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_7\">\n\n\t\t<h3>Write a function addm that takes two m objects and returns an m object.<br>\n\t\t\tJSON.stringify(addm(m(3), m(4))) // {\"value\": 7, \"source\": \"(3+4)\"}   <br>\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction addm(x,y)\n\t{\n\t  return {\n\t\t  value: x.value + y.value,\n\t\t  source: \"(\" + x.source + \"+\" + y.source+ \")\" \n\t\t};\n\t}\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(JSON.stringify(addm(m(3), m(4))))\"> addm(m(3), m(4))</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(addm(m(getInput1int()), m(getInput2int()))))\"> addm(m(Input1), m(Input2))</button>\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_8\">\n\n\t\t<h3>Write a function binarymf that takes a binary function and a string and returns a \n\t\t\tfunction that acts on m objects.<br>\n\t\t\taddm = binarymf(add, \"+\");<br>\n\t\t\tJSON.stringify(addm(m(3), m(4))) // {\"value\": 7, \"source\": \"(3+4)\"}  <br>\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction binarymf(f,s)\n\t{\n\t  return function(x,y)\n\t  {\n\t\treturn {\n\t\t  value: (f(x.value,y.value)),\n\t\t  source: \"(\" + x.source + s + y.source+ \")\" \n\t\t}\n\t   };\n\t}\n\t\n\taddm2 = binarymf(add, \"+\"); \n\tmulm2 = binarymf(mul, \"*\"); \n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(JSON.stringify(addm2(m(3), m(4))))\"> addm2(m(3), m(4))</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(mulm2(m(3), m(4))))\"> addm2(m(3), m(4))</button>\n\t\n\t<button onclick=\"simple_display_function(JSON.stringify(addm2(m(getInput1int()), m(getInput2int()))))\"> addm2(m(Input1), m(Input2))</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(mulm2(m(getInput1int()), m(getInput2int()))))\"> addm2(m(Input1), m(Input2))</button>\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_9\">\n\n\t\t<h3>Modify function binarymf so that the functions it produces <br>\n\t\tcan accept arguments that are either numbers or m objects.<br>\n\t\taddm = binarymf(add, \"+\");<br>\n\t\tJSON.stringify(addm(3, 4)) // {\"value\": 7, \"source\": \"(3+4)\"} <br>\n\t\t\n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction binarymf2(f,s)\n\t{\n\t  return function(x,y)\n\t  {\n\t\tif(typeof(x) ===\"number\")\n\t\t{\n\t\t  x=m(x);\n\t\t}\n\t\tif(typeof(y) ===\"number\")\n\t\t{\n\t\t  y=m(y);\n\t\t}\n\t\treturn {\n\t\t  value: (f(x.value,y.value)),\n\t\t  source: \"(\" + x.source + s + y.source+ \")\" \n\t\t}\n\t   };\n\t}\n\t\n\taddm3 = binarymf2(add, \"+\"); \n\tmulm3 = binarymf2(mul, \"*\"); \n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(JSON.stringify(addm3(3, m(4))))\"> addm3(3, m(4))</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(mulm3(m(3), 4)))\"> mulm3(m(3), 4)</button>\n\t\n\t<button onclick=\"simple_display_function(JSON.stringify(addm3(m(getInput1int()), m(getInput2int()))))\"> addm3(m(Input1), m(Input2))</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(mulm3(getInput1int(), getInput2int())))\"> mulm3(Input1, Input2)</button>\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_10\">\n\n\t\t<h3>Write function unarymf, which is like binarymf except that it acts on unary functions.<br>\n\t\t\tsquarem = unarymf(square, \"square\");<br>\n\t\t\tJSON.stringify(squarem(4)) // {\"value\": 16, \"source\": \"(square 4)\"}  <br>\n\t\t\n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction unarymf(f,s)\n\t{\n\t  return function(x)\n\t  {\n\t\tif(typeof(x) ===\"number\")\n\t\t{\n\t\t  x=m(x);\n\t\t}\n\t\treturn {\n\t\t  value: (f(x.value)),\n\t\t  source: s+\"(\" + x.source+\")\" \n\t\t}\n\t   };\n\t}\n\t\n\tsquarem = unarymf(square, \"square\");\n\tdoublem = unarymf(double, \"double\");\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(JSON.stringify(squarem(3)))\"> squarem(3)</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(doublem(m(3))))\"> doublem(m(3))</button>\n\t\n\t<button onclick=\"simple_display_function(JSON.stringify(squarem(getInput1int())))\"> squarem(Input1)</button>\t\n\t<button onclick=\"simple_display_function(JSON.stringify(doublem(getInput1int())))\"> doublem(m(Input1))</button>\n\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_11\">\n\n\t\t<h3>Write a function that takes the lengths of two sides of a \n\t\ttriangle and computes the length of the hypotenuse. \n\t\t(Hint: c2 = a2 + b2)<br>\n\t\thyp(3, 4) // 5  <br>\n\t\t\n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction hyp(x,y)\n\t{\n\t  return Math.sqrt((x*x) + (y*y))\n\t}\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(hyp(3, 4))\"> hyp(3, 4)</button>\t\n\t<button onclick=\"simple_display_function(hyp(getInput1(), getInput2()))\"> hyp(Input1, Input2)</button>\t\n\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_12\">\n\n\t\t<h3>Write a function that evaluates array expressions.<br>\n\t\t\thypa = [ Math.sqrt, [ add, [mul, 3, 3], [mul, 4, 4] ] ];<br>\n\t\t\texp(hypa) // 5 <br>\n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction exp(arr)\n\t{\n\t  if(Array.isArray(arr))\n\t  {\n\t\tvar f = arr[0];\n\t\tvar x = arr[1];\n\t\tvar y = arr[2];\n\n\t\treturn f(exp(x),exp(y));\n\t  }\n\t  else\n\t  {\n\t\treturn arr;\n\t  }\n\t}\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"simple_display_function(exp([ Math.sqrt, [ add, [mul, 3, 3], [mul, 4, 4] ] ]))\"> exp([ Math.sqrt, [ add, [mul, 3, 3], [mul, 4, 4] ] ])</button>\t\n\t<button onclick=\"simple_display_function(exp([ Math.sqrt, [ add, [square, 4], [square, 5] ] ]))\"> exp([ Math.sqrt, [ add, [square, 4], [square, 5] ] ])</button>\t\n\t\n\t<button onclick=\"simple_display_function(exp([ Math.sqrt, [ add, [square, getInput1int()], [square, getInput2int()] ] ]))\"> exp([ Math.sqrt, [ add, [square, Input1], [square, Input2] ] ])</button>\t\n\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_13\">\n\n\t\t<h3>Make a function that stores a value in a variable. <br>\n\t\t\tvar variable; <br>\n\t\t\tstore(5); // variable === 5 \n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tvar variable = 0;\n\n\tfunction store(x)\n\t{\n\t  variable = x;\n\t}\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"store(5);simple_display_function('Store('+variable+')') \"> store(5)</button>\t\n\t<button onclick=\"store(42);simple_display_function('Store('+variable+')') \"> store(2)</button>\t\n\t<button onclick=\"store(getInput1());simple_display_function('Store('+variable+')') \"> store(Input1)</button>\t\n\t\n\t<button onclick=\"simple_display_function(variable) \"> show Value</button>\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_14\">\n\n\t\t<h3>Make a function that takes a binary function, two functions that provide operands, and a function that takes the result.\n\t\t\tquatre( add, identityf(3), identityf(4), store ); // variable === 7 \n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction quatre(f,fx,fy,fout)\n\t{\n\t  fout(f(fx(),fy()));\n\t}\n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"quatre( add, identity_function(3), identity_function(4), store );simple_display_function('variable='+variable)\"> quatre( add, identityf(3), identityf(4), store )</button>\t\n\t<button onclick=\"quatre( mul, identity_function(3), identity_function(4), store );simple_display_function('variable='+variable)\"> quatre( mul, identityf(3), identityf(4), store )</button>\t\n\t\n\t<button onclick=\"quatre( add, identity_function(getInput1int()), identity_function(getInput2int()), store );simple_display_function('variable='+variable)\"> quatre( add, identityf(Input1), identityf(Input2), store )</button>\t\n\t<button onclick=\"quatre( mul, identity_function(getInput1int()), identity_function(getInput2int()), store );simple_display_function('variable='+variable)\"> quatre( mul, identityf(Input1), identityf(Input2), store )</button>\t\n\t\n\t<button onclick=\"quatre( mul, identity_function(getInput1int()), identity_function(getInput2int()), alert );\"> quatre( mul, identityf(Input1), identityf(Input2), alert )</button>\t\n\t<button onclick=\"simple_display_function(variable);\"> get variable</button>\t\n\t\n\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_15\">\n\n\t\t<h3>Make a function that takes a unary function, \n\t\t\tand returns a function that takes an argument and a callback. <br>\n\t\t\tsqrtc = unaryc(Math.sqrt); sqrt(81, store) // variable === 9 \n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction unaryc(f)\n\t{\n\t  return function(x,callback)\n\t  {\n\t\tcallback(f(x));\n\t  }\n\n\t}\n\tvar sqrtc = unaryc(Math.sqrt); \n\tvar doublec = unaryc(double); \n\tvar squarec = unaryc(square); \n\t\n\t</code>\n\t</pre>\n\n\t<button onclick=\"sqrtc(81,store);simple_display_function('variable='+variable)\"> sqrtc(81,store)</button>\t\n\t<button onclick=\"doublec(21,store);simple_display_function('variable='+variable)\"> doublec(21,store)</button>\t\n\t<button onclick=\"squarec(4,store);simple_display_function('variable='+variable)\"> squarec(4,store)</button>\t\n\t\n\t<button onclick=\"sqrtc(getInput1int(),store);simple_display_function('variable='+variable)\"> sqrtc(Input1,store)</button>\t\n\t<button onclick=\"doublec(getInput1int(),store);simple_display_function('variable='+variable)\"> doublec(Input1,store)</button>\t\n\t<button onclick=\"squarec(getInput1int(),store);simple_display_function('variable='+variable)\"> squarec(Input1,store)</button>\t\n\t\n\t<button onclick=\"simple_display_function(variable);\"> get variable</button>\t\n\t\n\t\n\t</div>\n\t<div class=\"Aufgabehidden\" id=\"a2_16\">\n\n\t\t<h3>Make a function that takes a binary function, and returns a  \n\t\t\tfunction that takes two arguments and a callback.<br>\n\t\t\taddc = binaryc(add); addc(4, 5, store) // variable === 9 <br>\n\t\t\tmulc = binaryc(mul); mulc(2, 3, store) // variable === 6 <br>\n\t\t\n\t\t</h3>\n\t\t<pre>\n\t\t\t<code class=\"language-javascript\">\n\n\tfunction binaryc(f)\n\t{\n\t  return function(x,y,callback)\n\t  {\n\t\tcallback(f(x,y));\n\t  }\n\t}\n\n\tvar addc = binaryc(add); \n\tvar mulc = binaryc(mul); \n\t</code>\n\t</pre>\n\n\t<button onclick=\"addc(4, 5, store);simple_display_function('variable='+variable)\"> addc(4, 5, store)</button>\t\n\t<button onclick=\"mulc(2, 3, store);simple_display_function('variable='+variable)\"> mulc(2, 3, store)</button>\t\n\t\n\t<button onclick=\"addc(getInput1int(), getInput2int(), store);simple_display_function('variable='+variable)\"> addc(Input1, Input2, store)</button>\t\n\t<button onclick=\"mulc(getInput1int(), getInput2int(), store);simple_display_function('variable='+variable)\"> mulc(Input1, Input2, store)</button>\t\n\t\n\t\n\t<button onclick=\"simple_display_function(variable);\"> get variable</button>\t\n\t\n\t</div>\n\t\n\t\n</div>\n<div class=\"ConsoleContainer\">\n<div>\n<button onclick=\"clearConsole()\"> clearConsole()</button> <br>\n\n<label for=\"Input1\">Input1:</label>\n<input type=\"number\" name=\"Input1\" id=\"Input1\">\n<br>\n<label for=\"Input2\">Input2:</label>\n<input type=\"number\" name=\"Input2\" id=\"Input2\">\n<br>\n<label for=\"Input3\">Input3:</label>\n<input type=\"text\" name=\"Input3\" id=\"Input3\">\n</div>\n<div>\n<h1> Console </h1>\n<div id=\"Console\"> </div>\n</div>\n</div>\n</body>\n</html>\n\n\n\n\n`;\n\n  article.insertAdjacentHTML('beforeend', section);\n\n  return article;\n};\n"],"mappings":";;;;;;;;;;;AAAA;AAAA;AACA;AAEA;AAoqDA;AAEA;AACA;;;;A","sourceRoot":""}