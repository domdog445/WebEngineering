{"version":3,"file":"main.a67e54082fcb0bc8db03.hot-update.js","sources":["webpack:///./stories/Ubung7/Page7.stories.js","webpack:///./stories/Ubung7/Page7Merge.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { createPage6createFiles } from './Page7CreateFiles'\\nimport {createPage6MergeFiles} from './Page7Merge'\\n\\nexport default {\\n  title: 'Lösungen der Übungen/Übung 07',\\n  argTypes: {},\\n};\\n\\nconst TemplatecreateFiles = (args) => createPage6createFiles(args);\\nexport const FileGeneratoren = TemplatecreateFiles.bind({});\\n\\nconst TemplateMerge = (args) => createPage6MergeFiles(args);\\nexport const FileMergen = TemplateMerge.bind({});\\n\\n\\n\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"FileGeneratoren\":{\"startLoc\":{\"col\":28,\"line\":9},\"endLoc\":{\"col\":66,\"line\":9},\"startBody\":{\"col\":28,\"line\":9},\"endBody\":{\"col\":66,\"line\":9}},\"FileMergen\":{\"startLoc\":{\"col\":22,\"line\":12},\"endLoc\":{\"col\":59,\"line\":12},\"startBody\":{\"col\":22,\"line\":12},\"endBody\":{\"col\":59,\"line\":12}}};\n    \nimport { createPage6createFiles } from './Page7CreateFiles'\nimport {createPage6MergeFiles} from './Page7Merge'\n\nexport default {\n  title: 'Lösungen der Übungen/Übung 07',\n  argTypes: {},\n};\n\nconst TemplatecreateFiles = (args) => createPage6createFiles(args);\nexport const FileGeneratoren = TemplatecreateFiles.bind({});;\n\nconst TemplateMerge = (args) => createPage6MergeFiles(args);\nexport const FileMergen = TemplateMerge.bind({});\n\n\n\n\n\n\nFileGeneratoren.parameters = { storySource: { source: \"(args) => createPage6createFiles(args)\" }, ...FileGeneratoren.parameters };\nFileMergen.parameters = { storySource: { source: \"(args) => createPage6MergeFiles(args)\" }, ...FileMergen.parameters };","export const createPage6MergeFiles = ({\n\n}) => {\n  const article = document.createElement('article');\n\n  const section = `\n  <script src=\"/Style/prism.js\"></script>\n  <link rel=\"stylesheet\" href=\"/Style/prism.css\">\n  <p>In dieser Aufgabe sollten zwei Node Kommandozeilen-Tools entwickelt werden. Die erste Anwendung soll eine Datei erstellen welche mit Zahlen gefühlt ist. Die andere Erstellt eine Datei welche mit Buchstaben gefühlt ist. Die Anzahl der Zeilen können als Parameter übergeben werden </p>\n  \n\n  <details>\n  <summary> Source Code des Buchstaben Genereator (alpha_file_gen.mjs)</summary>\n\n\n  <pre>\n\t\t<code class=\"language-javascript\">\n\t\timport fs from \"fs\"\n\n\t\texport function MergeFsFile(file1,file2,OutputName)\n\t\t{\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tPromise.all([getPromiseReadFile(file1), getPromiseReadFile(file2)])\n\t\t\t\t\t.then((values) => {\n\t\t\t\t\tfs.writeFile(OutputName, MergeStrings(values[0],values[1]), (err) => {\n\t\t\t\t\t\tif (err) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('Merge successfull');\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t});\t  \n\t\t\t});\n\t\t\t\t\n\t\t\t\n\t\t}\n\n\t\texport function getPromiseReadFile(filename)\n\t\t{\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tfs.readFile(filename, \"utf8\", function(err, data){\n\t\t\t\t\tif (err) \n\t\t\t\t\t\treject(err); \n\t\t\t\t\telse\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t}\n\n\t\texport function MergeStrings(String1,String2)\n\t\t{\n\t\t\tvar allA = String1.split(\"\\r\\n\");\n\t\t\tvar allB = String2.split(\"\\r\\n\");\n\t\t\tvar result = \"\";\t\t\t\n\t\t\tvar i = 0;\t\n\t\t\twhile(i < allA.length || i < allB.length)\n\t\t\t{\n\t\t\t\tif(i < allA.length)\n\t\t\t\t{\n\t\t\t\t\tresult += allA[i];\n\t\t\t\t}\n\t\t\t\tif(i < allB.length)\n\t\t\t\t{\n\t\t\t\t\tresult += allB[i];\n\t\t\t\t}\n\t\t\t\tresult += \"\\r\\n\";\n\t\t\t\ti++;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t\n\t\t</code>\n\t</pre>\n\t</details>\n\t<a href=\"/U7/Alpha.txt\">Beispieldatei mit 10000 Zeilen (Buchstaben)</a>\n\t<br>\n\t<br>\n\t<details>\n\t<summary> Source Code des Zahlen Genereator (number_file_gen.mjs)</summary>\n  \n  \n\t<pre>\n\t\t  <code class=\"language-javascript\">\n\t\t  import fs from \"fs\"\n\t\t  import { PassThrough } from 'stream'\n\t\t  import readline from 'readline';\n\t\t  import {pipeline } from 'stream/promises';\n\t\t  \n\t\t  \n\t\t  var\tarr1 = [];\n\t\t  var\tarr2 = [];\n\t\t  var finished1 = false;\n\t\t  var finished2 = false;\n\t\t  /*\n\t\t  if(process.argv.length >= 4)\n\t\t\t  FSReadFileStream([process.argv[2],process.argv[3],process.argv[4]])\n\t\t  else\n\t\t  {\n\t\t\t  console.log(\"node [filename1] [filename2] [OutputFile]\");\n\t\t  }*/\n\t\t  \n\t\t  \n\t\t  export async function MergeFileStream(file1,file2,OutputName)\n\t\t  {\n\t\t\t  return new Promise(async(resolve, reject) => {\n\t\t\t\t  const ReadStream1 = fs.createReadStream(file1,\"utf8\");\n\t\t\t\t  const ReadStream2 = fs.createReadStream(file2,\"utf8\");\n\t\t\t\t  const WriteStream = fs.createWriteStream(OutputName);\n\t\t\t\t  \n\t\t\t\t  \n\t\t\t\t  await pipeline(ReadStream2,\n\t\t\t\t\t  async function(source)\n\t\t\t\t\t  {\n\t\t\t\t\t  source.setEncoding('utf8')\n\t\t\t\t\t\t  for await (const chunk of source)\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  arr1 = merge2ArraysPerLine(arr1,chunk.split(\"\\r\\n\"));\n\t\t\t\t\t\t\t  MergeStrings(WriteStream);\n\t\t\t\t\t\t\t  WriteStream.write(\"-AA-\");\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  );\n\t\t\t\t  await pipeline(ReadStream1,\n\t\t\t\t\t  async function(source)\n\t\t\t\t\t  {\n\t\t\t\t\t  source.setEncoding('utf8')\n\t\t\t\t\t\t  for await (const chunk of source)\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t  arr2 = merge2ArraysPerLine(arr2,chunk.split(\"\\r\\n\"));\n\t\t\t\t\t\t\t  await MergeStrings(WriteStream);\n\t\t\t\t\t\t\t  WriteStream.write(\"-BB-\");\n\t\t\t\t\t\t  }\n\t\t\t\t\t  }\n\t\t\t\t  );\n\t\t\t\t  \n\t\t\t\t  \n\t\t\t\t  console.log(\"End\");\n\t\t\t\t  WriteStream.end();\n\t\t\t\t  resolve();\n\t\t\t  \n\t\t\t  });\n\t\t\t  \n\t\t  }\n\t\t  \n\t\t  \n\t\t  function merge2ArraysPerLine(a1,a2)\n\t\t  {\n\t\t\t  var result = [];\n\t\t\t  if(a1.length >= 1)\n\t\t\t  {\n\t\t\t\t  \n\t\t\t\t  var tmp = a1.at[a1.length - 1] + a1[0];\n\t\t\t\t  \n\t\t\t\t  var tmps = tmp.split(\"\\r\\n\");\n\t\t\t\t  \n\t\t\t\t  result = a1.slice(0, -1)\n\t\t\t\t  result.concat(tmps);\n\t\t\t\t  result.concat(a2.slice(0, -1));\n\t\t\t\t  return result;\n\t\t\t  }\n\t\t\t  else\n\t\t\t  {\n\t\t\t\t  return a2;\n\t\t\t  }\n\t\t\t  \n\t\t  }\n\t\t  \n\t\t  function getPromiseReadFile(filename)\n\t\t  {\n\t\t\t  return new Promise(function(resolve, reject) {\n\t\t\t\t  fs.readFile(filename, \"utf8\", function(err, data){\n\t\t\t\t\t  if (err) \n\t\t\t\t\t\t  reject(err); \n\t\t\t\t\t  else\n\t\t\t\t\t\t  resolve(data);\n\t\t\t\t  });\n\t\t\t  });\n\t\t\t  \n\t\t  }\n\t\t  \n\t\t  async function MergeStrings(WriteStream)\n\t\t  {\n\t\t\t  \n\t\t\t  while((arr1.length >1 || finished1) &&\n\t\t\t\t\t(arr2.length >1 || finished2) \n\t\t\t  )\n\t\t\t  {\n\t\t\t\t  if (finished1 && finished2 && arr1.length ==0 && arr2.length == 0)\n\t\t\t\t\t  return;\n\t\t  \n\t\t\t  \n\t\t\t\t  var result = \"\"\n\t\t\t\t  if(arr1.length>0)\n\t\t\t\t  {\n\t\t\t\t\t  result += arr1[0];\n\t\t\t\t\t  arr1.splice(0, 1);\n\t\t\t\t  }\n\t\t\t\t  if(arr2.length>0)\n\t\t\t\t  {\n\t\t\t\t\t  result += arr2[0];\n\t\t\t\t\t  arr2.splice(0, 1);\n\t\t\t\t  }\n\t\t\t\t  result += \"\\r\\n\";\n\t\t\t\t\t  \n\t\t\t\t  WriteStream.write(result);\n\t\t\t\t  //console.log(\"A: \" + result);\n\t\t\t  }\n\t\t\t  return result;\n\t\t  }\n\t\t  \n\t\t  </code>\n\t  </pre>\n\t  </details>\n\t  \n\t<a href=\"/U7/number.txt\">Beispieldatei mit 10000 Zeilen (Zahlen)</a>\n\n`;\n\n  article.insertAdjacentHTML('beforeend', section);\n\n  return section;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;AC5BA;AAEA;AACA;AAAA;AAEA;AA2NA;AAEA;AACA;;;;A","sourceRoot":""}