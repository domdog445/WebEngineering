webpackHotUpdate("main",{

/***/ "./stories/Ubung7/Page7CreateFiles.js":
/*!********************************************!*\
  !*** ./stories/Ubung7/Page7CreateFiles.js ***!
  \********************************************/
/*! exports provided: createPage6createFiles */
/*! exports used: createPage6createFiles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createPage6createFiles; });
function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

var createPage6createFiles = function createPage6createFiles(_ref) {
  _objectDestructuringEmpty(_ref);

  var article = document.createElement('article');
  var section = "\n  <script src=\"/Style/prism.js\"></script>\n  <link rel=\"stylesheet\" href=\"/Style/prism.css\">\n  <p>In dieser Aufgabe sollten zwei Node Kommandozeilen-Tools entwickelt werden. Die erste Anwendung soll eine Datei erstellen welche mit Zahlen gef\xFChlt ist. Die andere Erstellt eine Datei welche mit Buchstaben gef\xFChlt ist. Die Anzahl der Zeilen k\xF6nnen als Parameter \xFCbergeben werden </p>\n  \n\n  <details>\n  <summary> Source Code des Buchstaben Genereator (alpha_file_gen.mjs)</summary>\n\n\n  <pre>\n\t\t<code class=\"language-javascript\">\n\t\timport fs from \"fs\"\n\t\t\n\t\t\n\t\t/*\n\t\tif(process.argv.length >= 3)\n\t\t{\n\t\t\tvar amount = process.argv[2];\n\t\t\t\n\t\t\tvar filename = \"output.txt\"\n\t\t\tif(process.argv.length >= 4)\n\t\t\t\tfilename = process.argv[3];\n\t\t\t\n\t\t\tgenAlphaFile(amount,filename)\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconsole.log(\"nodess [amount] [filename]\" + process.argv);\n\t\t}*/\n\t\t\n\t\t\n\t\texport function genAlphaFile(amount,filename,callback)\n\t\t{\n\t\t\t\n\t\t\tconsole.log(\"Create: \" + amount +\" lines\");\n\t\t\tif(filename === undefined)\n\t\t\t\tfilename = \"output.txt\";\n\t\t\t\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\tfs.writeFile(filename, createString(amount), function(err) {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn console.error(err);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Es wurde eine Datei '\" + filename + \"' mit \" + amount+ \" Zeilen erstellt.\");\n\t\t\t\tif(callback !== undefined)\n\t\t\t\t\tcallback();\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tfunction createString(amount)\n\t\t{\n\t\t\tamount = parseInt(amount);\n\t\t\tvar result = \"\";\n\t\t\tfor(var i=0; i < amount; i++)\n\t\t\t{\n\t\t\t\tresult+= getChar(i) + \"\r\n\"\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tfunction getChar(val)\n\t\t{\n\t\t\tif(val < 26)\n\t\t\t{\n\t\t\t\treturn String.fromCharCode(65 + val);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn getChar(val/26-1) + getChar(val%26);\n\t\t\t}\n\t\t}\n\t\t\n\t\t</code>\n\t</pre>\n\t</details>\n\t<details>\n\t<summary> Source Code des Zahlen Genereator (number_file_gen.mjs)</summary>\n  \n  \n\t<pre>\n\t\t  <code class=\"language-javascript\">\nimport http from 'http';\nimport fs from \"fs\"\n\n\n\n\nexport function genNumberFile(amount,filename,callback)\n{\n\tconsole.log(\"Create: \" + amount +\" lines\");\n\tif(filename === undefined)\n\t\tfilename = \"output.txt\";\n\t\n\t\n\t\n\treturn new Promise((resolve, reject) => {\n\t\tfs.writeFile(filename, createString(amount), function(err) {\n\t    if (err) {\n\t\t\treject();\n\t\t\treturn console.error(err);\n\t\t}\n\t\tconsole.log(\"Es wurde eine Datei '\" + filename + \"' mit \" + amount+ \" Zeilen erstellt.\");\n\t\tif(callback !== undefined)\n\t\t\tcallback();\n\t\tresolve();\n\t});\n\t});\n}\n/*\nif(process.argv.length >= 3)\n{\n\tvar amount = process.argv[2];\n\tconsole.log(\"Create: \" + amount +\" lines\");\n\t\n\tvar filename = \"output.txt\"\n\tif(process.argv.length >= 4)\n\t\tfilename = process.argv[3];\n\t\n\t\n\t\n\tfs.writeFile(filename, createString(amount), function(err) {\n\t   if (err) {\n\t\t  return console.error(err);\n\t   }\n\t   console.warn(\"Es wurde eine Datei '\" + filename + \"' mit \" + amount+ \" Zeilen erstellt.\");\n\t});\n\t\n}\nelse\n{\n\tconsole.log(\"node [amount] [filename]\");\n}*/\n\n\n/*\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  \n  res.setHeader('Content-Type', 'text/plain');\n  if(process.argv.length == 3)\n\t  \n  res.end(\"\");\n});\n\n\n\t\t  \n\t\t  </code>\n\t  </pre>\n\t  </details>\n\n";
  article.insertAdjacentHTML('beforeend', section);
  return section;
};

/***/ })

})
//# sourceMappingURL=main.75ea8954691969724491.hot-update.js.map