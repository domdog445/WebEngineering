webpackHotUpdate("main",{

/***/ "./stories/Ubung7/Page7CreateFiles.js":
/*!********************************************!*\
  !*** ./stories/Ubung7/Page7CreateFiles.js ***!
  \********************************************/
/*! exports provided: createPage6createFiles */
/*! exports used: createPage6createFiles */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createPage6createFiles; });
function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

var createPage6createFiles = function createPage6createFiles(_ref) {
  _objectDestructuringEmpty(_ref);

  var article = document.createElement('article');
  var section = "\n  <script src=\"/Style/prism.js\"></script>\n  <link rel=\"stylesheet\" href=\"/Style/prism.css\">\n  <p>In dieser Aufgabe sollten zwei Node Kommandozeilen-Tools entwickelt werden. Die erste Anwendung soll eine Datei erstellen welche mit Zahlen gef\xFChlt ist. Die andere Erstellt eine Datei welche mit Buchstaben gef\xFChlt ist. Die Anzahl der Zeilen k\xF6nnen als Parameter \xFCbergeben werden </p>\n  \n\n  <details>\n  <summary> Source Code des Buchstaben Genereator (alpha_file_gen.mjs)</summary>\n\n\n  <pre>\n\t\t<code class=\"language-javascript\">\n\t\timport fs from \"fs\"\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\texport function genAlphaFile(amount,filename,callback)\n\t\t{\n\t\t\t\n\t\t\tconsole.log(\"Create: \" + amount +\" lines\");\n\t\t\tif(filename === undefined)\n\t\t\t\tfilename = \"output.txt\";\n\t\t\t\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\tfs.writeFile(filename, createString(amount), function(err) {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn console.error(err);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Es wurde eine Datei '\" + filename + \"' mit \" + amount+ \" Zeilen erstellt.\");\n\t\t\t\tif(callback !== undefined)\n\t\t\t\t\tcallback();\n\t\t\t\tresolve();\n\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t\tfunction createString(amount)\n\t\t{\n\t\t\tamount = parseInt(amount);\n\t\t\tvar result = \"\";\n\t\t\tfor(var i=0; i < amount; i++)\n\t\t\t{\n\t\t\t\tresult+= getChar(i) + \"\r\n\"\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tfunction getChar(val)\n\t\t{\n\t\t\tif(val < 26)\n\t\t\t{\n\t\t\t\treturn String.fromCharCode(65 + val);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn getChar(val/26-1) + getChar(val%26);\n\t\t\t}\n\t\t}\n\t\t\n\t\t</code>\n\t</pre>\n\t</details>\n\t<a href=\"/U7/Alpha.txt\">Beispieldatei mit 10000 Zeilen (Buchstaben)</a>\n\t<br>\n\t<br>\n\t<details>\n\t<summary> Source Code des Zahlen Genereator (number_file_gen.mjs)</summary>\n  \n  \n\t<pre>\n\t\t  <code class=\"language-javascript\">\n\t\timport http from 'http';\n\t\timport fs from \"fs\"\n\n\n\n\n\t\texport function genNumberFile(amount,filename,callback)\n\t\t{\n\t\t\tconsole.log(\"Create: \" + amount +\" lines\");\n\t\t\tif(filename === undefined)\n\t\t\t\tfilename = \"output.txt\";\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tfs.writeFile(filename, createString(amount), function(err) {\n\t\t\t\tif (err) {\n\t\t\t\t\treject();\n\t\t\t\t\treturn console.error(err);\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Es wurde eine Datei '\" + filename + \"' mit \" + amount+ \" Zeilen erstellt.\");\n\t\t\t\tif(callback !== undefined)\n\t\t\t\t\tcallback();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t\t});\n\t\t}\n\t\t\n\n\n\t\t  \n\t\t  </code>\n\t  </pre>\n\t  </details>\n\t  \n\t<a href=\"/U7/number.txt\">Beispieldatei mit 10000 Zeilen (Zahlen)</a>\n\n\nsd\n\n\t<details>\n\t<summary> Source Code f\xFCr der Zeitmessung (timeMeassure.mjs)</summary>\n  \n  \n\t<pre>\n\t\t  <code class=\"language-javascript\">\n\t\t  import fs from \"fs\"\n\t\t  import {MergeFileStream} from \"./merge_streams.mjs\"\n\t\t  import {MergeFsFile} from \"./merge_files.mjs\"\n\t\t  import {genAlphaFile} from \"./alpha_file_gen.mjs\"\n\t\t  import {genNumberFile} from \"./number_file_gen.mjs\"\n\t\t  \n\t\t  \n\t\t  var arr = [0,1,2,3,4]\n\t\t  arr[arr.length - 1]=55\n\t\t  console.log(arr.at(-1))\n\t\t  let ready1 = false;\n\t\t  let ready2 = false;\n\t\t  \n\t\t  \n\t\t  test();\n\t\t  \n\t\t  \n\t\t  \n\t\t  \n\t\t  \n\t\t  async function genFiles()\n\t\t  {\n\t\t\t  console.time(\"Generate Files\");\n\t\t\t  await Promise.all([genNumberFile(20000,\"inputNumb20000.txt\"),\n\t\t\t\t\t\t\t\t  genAlphaFile(20000,\"inputAlph20000.txt\"),\n\t\t\t\t\t\t\t\t  genNumberFile(10,\"inputNumb10.txt\"),\n\t\t\t\t\t\t\t\t  genAlphaFile(10,\"inputAlph10.txt\"),\n\t\t\t\t\t\t\t\t  genNumberFile(1000,\"inputNumb1000.txt\"),\n\t\t\t\t\t\t\t\t  genAlphaFile(1000,\"inputAlph1000.txt\"),\n\t\t\t\t\t\t\t\t  genNumberFile(123456,\"inputNumb123456.txt\"),\n\t\t\t\t\t\t\t\t  genAlphaFile(123456,\"inputAlph123456.txt\")]);\n\t\t\t  console.timeEnd(\"Generate Files\")\n\t\t  \n\t\t  }\n\t\t  \n\t\t  \n\t\t  async function test()\n\t\t  {\n\t\t\t  console.time(\"Generate Files\");\n\t\t\t  await Promise.all([genNumberFile(10000 ,\"input1.txt\"),\n\t\t\t\t\t\t\t\t  genAlphaFile(10000 ,\"input2.txt\")]);\n\t\t\t  console.timeEnd(\"Generate Files\")\n\t\t\t  \n\t\t\t  \n\t\t\t  console.time(\"MergeFileStream\");\n\t\t\t  await MergeFileStream(\"input1.txt\",\"input2.txt\",\"outputstream.txt\") \n\t\t\t  console.timeEnd(\"MergeFileStream\")\n\t\t  \n\t\t\t  console.time(\"MergeFsFile\");\n\t\t\t  await MergeFsFile(\"input1.txt\",\"input2.txt\",\"outputfile.txt\")\n\t\t\t  console.timeEnd(\"MergeFsFile\")\n\t\t  }\n\t\t\n\n\n\t\t  \n\t\t  </code>\n\t  </pre>\n\t  </details>\n\n";
  article.insertAdjacentHTML('beforeend', section);
  return section;
};

/***/ })

})
//# sourceMappingURL=main.ab9930510344daa33214.hot-update.js.map