webpackHotUpdate("main",{

/***/ "./stories/Ubung7/Page7ExpressServer.js":
/*!**********************************************!*\
  !*** ./stories/Ubung7/Page7ExpressServer.js ***!
  \**********************************************/
/*! exports provided: createPage6Express */
/*! exports used: createPage6Express */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createPage6Express; });
function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

var createPage6Express = function createPage6Express(_ref) {
  _objectDestructuringEmpty(_ref);

  var article = document.createElement('article');
  var section = "\n  <script src=\"/Style/prism.js\"></script>\n  <link rel=\"stylesheet\" href=\"/Style/prism.css\">\n  <p>In dieser Aufgabe sollten zwei Node Kommandozeilen-Tools entwickelt werden. Die erste Anwendung soll eine Datei erstellen welche mit Zahlen gef\xFChlt ist. Die andere Erstellt eine Datei welche mit Buchstaben gef\xFChlt ist. Die Anzahl der Zeilen k\xF6nnen als Parameter \xFCbergeben werden </p>\n  \n\n  <details>\n  <summary> Source Code des Buchstaben Genereator (alpha_file_gen.mjs)</summary>\n\n\n  <pre>\n\t\t<code class=\"language-javascript\">\n\t\t//Imports\n\t\tconst fs = require('fs');\n\t\tconst http = require('http');\n\t\tconst https = require('https');\n\n\t\tconst merge_streams = require(\"./Moduls/merge_streams.js\");\n\t\tconst merge_files = require(\"./Moduls/merge_files.js\");\n\t\tconst alpha_file_gen = require(\"./Moduls/alpha_file_gen.js\");\n\t\tconst number_file_gen = require(\"./Moduls/number_file_gen.js\");\n\n\n\t\tconst outputfolder = \"Public/Output/\";\n\t\tconst inputfolder = \"Public/Input/\";\n\n\t\t//Express Const\n\t\tconst express = require('express');\n\t\tconst app = express();\n\n\t\tconst httpServer = http.createServer(app);\n\n\t\t//Activate directly folder\n\t\tapp.use('/static', express.static(__dirname + '/public'));\n\n\t\t//Body Parser\n\t\tapp.use(express.urlencoded({\n\t\textended: true\n\t\t}))\n\n\n\n\t\t// For http\n\t\thttpServer.listen(8080);\n\n\t\t//Startseite\n\t\tapp.get('/', function (req, res) {\n\t\t\tres.header('Content-type', 'text/html');\n\t\t\treturn res.end(\t`<h1> Willkommen beim Gen/Merge Tool </h1>\n\t\t\t\t<a href=\"/genFiles\">Hier geht es zum generieren von Dateien</a>'\n\t\t\t\t<a href=\"/MergeFiles\">Hier geht es zum konkatenieren der Dateien</a>'`\n\t\t\t\t\n\t\t\t);\n\t\t\t\n\t\t});\n\n\t\t//GenFiles\n\t\tapp.get('/genFiles', function (req, res) {\n\t\t\tres.header('Content-type', 'text/html');\n\t\t\treturn res.end(`<form method=\"POST\" action=\"/createFile\">\n\t\t\t\t\t<h1>Generate Files</h1>\n\t\t\t\t\t<a href=\"/\"> back </a> <br>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<label for=\"amountID\"> Amount: </label> </div>\n\t\t\t\t<input id=\"amountID\" type=\"text\" name=\"amount\" />\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t</style>\n\t\t\t\t<outerBox>\n\t\t\t\t<fieldset>\n\t\t\t\t<legend>GenerateType</legend> <div>\n\t\t\t\t\t<input type=\"radio\" id=\"numbCreate\" name=\"GenerationType\" value=\"numb\">\n\t\t\t\t\t<label for=\"numbCreate\"> Numbers</label> </div><div>\n\t\t\t\t\t<input type=\"radio\" id=\"alphCreate\" name=\"GenerationType\" value=\"alph\">\n\t\t\t\t\t<label for=\"alphCreate\"> Alphabatic</label> </div>\n\t\t\t\t</fieldset>\n\t\t\t\t</outerBox>\n\t\t\t\t\n\t\t\t\t<input type=\"submit\" />\n\t\t\t\t</form>\n\t\t\t\t<style>\n\t\t\t\t\tfieldset {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tflex-direction: column;\n\t\t\t\t\t}\n\t\t\t\t\touterBox {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tflex-direction: row;\n\t\t\t\t\t}\n\t\t\t\t`\n\t\t\t);\n\t\t\t\n\t\t});\n\n\t\t//MergeFiles\n\t\tapp.get('/MergeFiles', function (req, res) {\n\t\t\tres.header('Content-type', 'text/html');\n\t\t\t\n\t\t\tvar result = `<form method=\"POST\" action=\"/MergeFiles\">\n\t\t\t\t<h1>Merge follow Files</h1>\n\t\t\t\t<a href=\"/\"> back </a><br>\n\t\t\t\t<style>\n\t\t\t\t\tfieldset {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tflex-direction: column;\n\t\t\t\t\t}\n\t\t\t\t\touterBox {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tflex-direction: row;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t</style>\n\t\t\t\t<outerBox>\n\t\t\t\t<fieldset>\n\t\t\t\t<legend>File1</legend>`\n\t\t\t\n\t\t\t\n\t\t\t\n\n\t\t\tfs.readdir(inputfolder, (err, files) => {\n\t\t\t\tfiles.forEach(file => {\n\t\t\t\t\tresult +=`<div><input type=\"radio\" id=\"file1" + '$' + "{file}\" name=\"file1\" value=\"" + '$' + "{file}\">\n\t\t\t\t\t<label for=\"file1" + '$' + "{file}\"> " + '$' + "{file}</label> </div>`\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tresult+= \"</fieldset><fieldset><legend>File2</legend>\"\n\t\t\t\t\n\t\t\t\tfs.readdir(inputfolder, (err, files) => {\n\t\t\t\t\tfiles.forEach(file => {\n\t\t\t\t\t\tresult +=`<div><input type=\"radio\" id=\"file2" + '$' + "{file}\" name=\"file2\" value=\"" + '$' + "{file}\">\n\t\t\t\t\t\t<label for=\"file2" + '$' + "{file}\"> " + '$' + "{file}</label></div> `\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tresult +=  `</fieldset> </outerBox>\n\t\t\t\t\t<input type=\"submit\" />\n\t\t\t\t\t</form>`;\n\t\t\t\t\treturn res.end(result);\n\t\t\t\t\t\n\t\t\t\t})\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t})\n\t\t\t\n\t\t});\n\n\n\t\t//Post CreateFile\n\t\tapp.post('/createFile', (req, res) => {\n\t\t\tconst amount = req.body.amount;\n\t\t\tconst genType = req.body.GenerationType;\n\t\t\tvar outputPath = inputfolder+genType+amount+\".txt\";\n\t\t\t\n\t\t\tconsole.log(amount);\n\t\t\tconsole.log(genType);\n\t\t\t\n\t\t\tif(isNaN(amount))\n\t\t\t{\n\t\t\t\tres.end(amount + \" ist keine g\xFCltige Zahl\");\n\t\t\t\treturn;\t\n\t\t\t}\n\t\t\t\n\t\t\tif(genType === \"numb\")\n\t\t\t\tgenFile(amount,outputPath,res,number_file_gen.gen);\n\t\t\telse if(genType === \"alph\")\n\t\t\t\tgenFile(amount,outputPath,res,alpha_file_gen.gen);\n\t\t\telse\n\t\t\t\tres.end(genType + \" ist nicht 'alph' oder 'numb'\");\n\t\t})\n\n\n\t\tapp.post('/MergeFiles', (req, res) => {\n\t\t\tconst file1 = req.body.file1;\n\t\t\tconst file2 = req.body.file2;\n\t\t\t\n\t\t\tconsole.log(file1);\n\t\t\tconsole.log(file2);\n\t\t\t\n\t\t\tconst file1Path = inputfolder + file1;\n\t\t\tconst file2Path = inputfolder + file2;\n\t\t\t\n\t\t\tvar outputPath = outputfolder+\"Merged-\"+file1+\"-\"+file2+\".txt\"\n\t\t\t\n\t\t\tMergeFSS(file1Path,file2Path,outputPath,res);\n\t\t\t\n\t\t\t\n\t\t})\n\n\t\t//Get CreateNumb\n\t\tapp.get('/createNumbFile/:amount', function(req, res) {\n\t\t\tconsole.log(req.params);\n\t\t\t\n\t\t\t\n\t\t\tvar amount = req.params.amount;\n\t\t\tvar outputPath = inputfolder+\"Numb\"+amount+\".txt\";\n\t\t\t\n\t\t\tif(isNaN(amount))\n\t\t\t{\n\t\t\t\tres.end(amount + \" ist keine g\xFCltige Zahl\");\n\t\t\t\treturn;\t\n\t\t\t}\n\t\t\t\n\t\t\tgenFile(amount,outputPath,res,number_file_gen.gen);\n\t\t});\n\n\t\t//Get CreateAlph\n\t\tapp.get('/createAlphFile/:amount', function(req, res) {\n\t\t\tconsole.log(req.params);\n\t\t\tvar amount = req.params.amount;\n\t\t\tvar outputPath = inputfolder+\"Alph\"+amount+\".txt\";\n\t\t\t\n\t\t\tif(isNaN(amount))\n\t\t\t{\n\t\t\t\tres.end(amount + \" ist keine g\xFCltige Zahl\");\n\t\t\t\treturn;\t\n\t\t\t}\n\t\t\tgenFile(amount,outputPath,res,alpha_file_gen.gen);\n\t\t\t\n\t\t\t\n\t\t});\n\n\t\t//Get Merge\n\t\tapp.get('/MergeFS/:file1/:file2', async function(req, res) {\n\t\t\t\n\t\t\n\t\t\tconsole.log(req.params);\n\t\t\tvar file1 = req.params.file1;\n\t\t\tvar file2 = req.params.file2;\n\t\t\tvar file1Path = inputfolder + file1;\n\t\t\tvar file2Path = inputfolder + file2;\n\t\t\tvar outputPath = outputfolder+\"Merged-\"+file1+\"-\"+file2+\".txt\"\n\t\t\t\n\t\t\tMergeFSS(file1Path,file2Path,outputPath,res);\n\t\t});\n\n\n\t\t//AsyncFunctions\n\n\t\tasync function MergeFSS(file1Path,file2Path,outputPath,res)\n\t\t{\n\t\t\tfs.access(file1Path, fs.constants.F_OK | fs.constants.W_OK, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tres.send(\n\t\t\t\t\t` " + '$' + "{file1Path} " + '$' + "{err.code === 'ENOENT' ? 'does not exist' : 'is read-only'}`);\n\t\t\t\t} else {\n\t\t\t\t\tfs.access(file2Path, fs.constants.F_OK | fs.constants.W_OK, async (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\tres.send(\n\t\t\t\t\t\t\t`" + '$' + "{file2Path} " + '$' + "{err.code === 'ENOENT' ? 'does not exist' : 'is read-only'}`);\n\t\t\t\t\t\t} else {\n\t\t\n\t\t\n\t\t\t\n\t\t\t\t\t\t\tawait merge_files.merge(file1Path,file2Path,outputPath);\n\t\t\t\t\t\t\tres.download(__dirname +\"/\"+ outputPath);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t}\n\t\tasync function genFile(amount,outputPath,res,genMethod)\n\t\t{\n\t\t\tawait genMethod(amount,outputPath);\n\t\t\t\n\t\t\tres.download(__dirname +\"/\"+ outputPath);\n\t\t}\n\n\n\n\t\t\n\t\t</code>\n\t</pre>\n\t</details>\n\t\n\n\n\n\n";
  article.insertAdjacentHTML('beforeend', section);
  return section;
};

/***/ })

})
//# sourceMappingURL=main.e4e2115e49db41869953.hot-update.js.map